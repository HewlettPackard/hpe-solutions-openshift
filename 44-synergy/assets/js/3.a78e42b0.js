(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{357:function(e,t,s){e.exports=s.p+"assets/img/figure48.37700461.png"},358:function(e,t,s){e.exports=s.p+"assets/img/figure49.02c5881d.png"},359:function(e,t,s){e.exports=s.p+"assets/img/figure50.8687950c.png"},360:function(e,t,s){e.exports=s.p+"assets/img/figure51.869d5680.png"},361:function(e,t,s){e.exports=s.p+"assets/img/figure52.f45ff5d6.png"},362:function(e,t,s){e.exports=s.p+"assets/img/figure53.0673e4a6.png"},363:function(e,t,s){e.exports=s.p+"assets/img/figure54.4a137a14.png"},364:function(e,t,s){e.exports=s.p+"assets/img/figure55.5f3c9359.png"},365:function(e,t,s){e.exports=s.p+"assets/img/figure56.97c463de.png"},366:function(e,t,s){e.exports=s.p+"assets/img/figure57.ee9dc550.png"},367:function(e,t,s){e.exports=s.p+"assets/img/figure58.ac5c9eb6.png"},368:function(e,t,s){e.exports=s.p+"assets/img/figure59.9144ba44.png"},369:function(e,t,s){e.exports=s.p+"assets/img/figure60.2f2db35e.png"},370:function(e,t,s){e.exports=s.p+"assets/img/figure61.4a641c3e.png"},371:function(e,t,s){e.exports=s.p+"assets/img/figure62.da6b554d.png"},372:function(e,t,s){e.exports=s.p+"assets/img/figure63.de819541.png"},373:function(e,t,s){e.exports=s.p+"assets/img/figure64.1c565354.png"},374:function(e,t,s){e.exports=s.p+"assets/img/figure65.493690e9.png"},375:function(e,t,s){e.exports=s.p+"assets/img/figure66.de09f86d.png"},376:function(e,t,s){e.exports=s.p+"assets/img/figure67.93759b94.png"},377:function(e,t,s){e.exports=s.p+"assets/img/figure68.ead1f83f.png"},378:function(e,t,s){e.exports=s.p+"assets/img/figure69.9ea7487b.png"},379:function(e,t,s){e.exports=s.p+"assets/img/figure79.28101f54.png"},380:function(e,t,s){e.exports=s.p+"assets/img/figure81.f42ac782.png"},381:function(e,t,s){e.exports=s.p+"assets/img/figure82.f42ac782.png"},382:function(e,t,s){e.exports=s.p+"assets/img/figure83.ee67cf57.png"},383:function(e,t,s){e.exports=s.p+"assets/img/figure84.1c6bffd3.png"},384:function(e,t,s){e.exports=s.p+"assets/img/figure85.5e2edf7f.png"},385:function(e,t,s){e.exports=s.p+"assets/img/figure86.7c0a1b9e.png"},386:function(e,t,s){e.exports=s.p+"assets/img/figure87.b38001aa.png"},387:function(e,t,s){e.exports=s.p+"assets/img/figure70.f9648fc8.png"},388:function(e,t,s){e.exports=s.p+"assets/img/figure71.58c48213.png"},389:function(e,t,s){e.exports=s.p+"assets/img/figure72.6b07dde4.png"},390:function(e,t,s){e.exports=s.p+"assets/img/figure76.d26321cd.png"},391:function(e,t,s){e.exports=s.p+"assets/img/figure77.fbd5d1f9.png"},392:function(e,t,s){e.exports=s.p+"assets/img/figure78.493690e9.png"},393:function(e,t,s){e.exports=s.p+"assets/img/figure73.93759b94.png"},394:function(e,t,s){e.exports=s.p+"assets/img/figure74.ead1f83f.png"},395:function(e,t,s){e.exports=s.p+"assets/img/figure75.9ea7487b.png"},480:function(e,t,s){"use strict";s.r(t);var a=s(42),r=Object(a.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"csi-driver"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#csi-driver"}},[e._v("#")]),e._v(" CSI Driver")]),e._v(" "),a("p",[e._v("Prior to Container Storage Integration (CSI), Kubernetes provided in-tree plugins to support volume. This posed a problem as storage vendors had to align to the Kubernetes release process to fix a bug or to release new features. This also means every storage vendor had their own process to present volume to Kubernetes.")]),e._v(" "),a("p",[e._v("CSI was developed as a standard for exposing block and file storage systems to containerized workloads on Container Orchestrator Systems (COS) like Kubernetes.  Container Storage Interface (CSI) is an initiative to unify the storage interface of COS combined with storage vendors. This means, implementing a single CSI for a storage vendor is guaranteed to work with all COS. With the introduction of CSI, there is a clear benefit for the COS and storage vendors. Due to its well-defined interfaces, it also helps developers and future COS to easily implement and test CSI. Volume plugins served the storage needs for container workloads in case of Kubernetes, before CSI existed.\nThe HPE CSI Driver is a multi-vendor and multi-backend driver where each implementation has a Container Storage Provider (CSP). The HPE CSI Driver for Kubernetes uses  CSP to perform data management operations on storage resources such as searching for a logical unit number (lun) and so on. Using the CSP specification, the HPE CSI Driver allows any vendor or project to develop its own CSP, which makes it very easy for third- parties to integrate their storage solution into Kubernetes as all the intricacies are taken care of by the HPE CSI Driver.")]),e._v(" "),a("p",[e._v("This document contains details on how to configure a HPE CSI Driver storage for 3PAR on an existing Red Hat OpenShift Container Platform 4.")]),e._v(" "),a("h2",{attrs:{id:"csi-driver-architecture"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#csi-driver-architecture"}},[e._v("#")]),e._v(" CSI Driver Architecture")]),e._v(" "),a("p",[e._v("A diagrammatic representation of the CSI driver architecture is illustrated. **Figure 424 shows the CSI architecture.")]),e._v(" "),a("p",[a("img",{attrs:{src:s(357),alt:""}})]),e._v(" "),a("p",[a("strong",[e._v("Figure 24.")]),e._v(" CSI architecture")]),e._v(" "),a("p",[e._v("The OpenShift Container Platform 4 cluster comprises the master and worker nodes (physical and virtual) with CoreOS deployed as the operating system. The iSCSI interface configured on the host nodes establishes the connection with the HPE 3PAR array to the cluster. Upon successful deployment of CSI Driver, the CSI controller, CSI Driver, and 3PAR CSP gets deployed which communicates with the HPE 3PAR or Nimble array via REST APIs. The associated features on Storage Class such as CSI Provisioner, CSI Attacher, and others are configured on the Storage Class.")]),e._v(" "),a("h3",{attrs:{id:"configuring-csi-driver"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#configuring-csi-driver"}},[e._v("#")]),e._v(" Configuring CSI Driver")]),e._v(" "),a("p",[e._v("Prior to configuring the HPE CSI driver, the following prerequisites needs to be met.")]),e._v(" "),a("h4",{attrs:{id:"prerequisites"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#prerequisites"}},[e._v("#")]),e._v(" Prerequisites")]),e._v(" "),a("ol",[a("li",[e._v("OpenShift Container Platform 4.x must be successfully deployed and console should be accessible.")]),e._v(" "),a("li",[e._v("iSCSI interface should be configured for HPE 3PAR Storage and Nimble storage on Host server.")]),e._v(" "),a("li",[e._v("Additional iSCSI network interfaces must be configured on worker nodes (physical and virtual).")]),e._v(" "),a("li",[e._v("Deploy scc.yaml file to enable Security Context Constraints (SCC).")])]),e._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[e._v("Note")]),e._v(" "),a("p",[e._v("To get access to the host ports, host network, and to mount the host path volume, the HPE CSI Driver needs to be run in privileged mode.  Prior to deployment of the CSI operator on OpenShift, createSCC to allow CSI driver to run with these privileges. Download SCC yaml file from GitHub "),a("a",{attrs:{href:"https://raw.githubusercontent.com/hpe-storage/co-deployments/master/operators/hpe-csi-operator/deploy/scc.yaml",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://raw.githubusercontent.com/hpe-storage/co-deployments/master/operators/hpe-csi-operator/deploy/scc.yaml"),a("OutboundLink")],1),e._v(" and update relevant fields such as project or namespace before running the yaml to deploy SCC.")])]),e._v(" "),a("h4",{attrs:{id:"configuring-iscsi-interface-on-worker-nodes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#configuring-iscsi-interface-on-worker-nodes"}},[e._v("#")]),e._v(" Configuring iSCSI interface on worker nodes")]),e._v(" "),a("p",[e._v("Additional iSCSI interface needs to be configured on all the worker nodes (physical and virtual) for establishing the connection between the OCP cluster and HPE 3PAR array, HPE Nimble array. iSCSI_A and iSCSI_B interfaces needs to be configured on the worker nodes for redundancy. Follow the steps as listed to configure the additional interface.")]),e._v(" "),a("ol",[a("li",[e._v("Create interface configuration files (ifcfg files) on each of the worker nodes by specifying the following parameters.")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("HWADDR=52:4D:1F:20:01:94 (MAC address of the iSCSI connector)\nTYPE=Ethernet\nBOOTPROTO=none\nIPADDR=40.0.17.221 \nPREFIX=16\nDNS1= 20.1.1.254\nONBOOT=yes\n")])])]),a("ol",{attrs:{start:"2"}},[a("li",[e._v("Reboot the worker nodes after configuring the ifcfg files. The 3PAR or Nimble Discovery IP should be pingable.")])]),e._v(" "),a("p",[a("img",{attrs:{src:s(358),alt:""}})]),e._v(" "),a("p",[e._v("For virtual worker nodes, additional network adapters are added and the corresponding network port groups are selected.")]),e._v(" "),a("p",[a("img",{attrs:{src:s(359),alt:""}})]),e._v(" "),a("h5",{attrs:{id:"iscsi-interface-for-physical-worker-nodes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#iscsi-interface-for-physical-worker-nodes"}},[e._v("#")]),e._v(" iSCSI Interface for physical worker nodes")]),e._v(" "),a("p",[e._v("For physical worker nodes, the server profile is configured with iSCSI_A connection for storage interface and additional iSCSI_B connection is added to the server profile for redundancy.")]),e._v(" "),a("p",[a("img",{attrs:{src:s(360),alt:""}})]),e._v(" "),a("h4",{attrs:{id:"steps-to-deploy-scc"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#steps-to-deploy-scc"}},[e._v("#")]),e._v(" Steps to deploy SCC")]),e._v(" "),a("p",[e._v("The following figure shows the parameters that needs to be edited (project name) where the CSI Operator is being deployed.")]),e._v(" "),a("p",[a("img",{attrs:{src:s(361),alt:""}})]),e._v(" "),a("ol",[a("li",[e._v("From the Installer vm, download the scc.yaml file from GitHub from the following path.\ncurl -sL <https://raw.githubusercontent.com/hpe-storage/co-deployments/master/operators/hpe-csi-operator/deploy/scc.yaml > hpe-csi-scc.yaml")]),e._v(" "),a("li",[e._v("Edit relevant parameters such as Project name and save the file.")]),e._v(" "),a("li",[e._v("Deploy SCC and check the output")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("oc create -f hpe-csi-scc.yaml\n")])])]),a("p",[e._v("Output:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("securitycontextconstraints.security.openshift.io/hpe-csi-scc created\n")])])]),a("h3",{attrs:{id:"csi-driver-installation-on-3par"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#csi-driver-installation-on-3par"}},[e._v("#")]),e._v(" CSI driver installation on 3PAR")]),e._v(" "),a("h4",{attrs:{id:"creating-namespace"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#creating-namespace"}},[e._v("#")]),e._v(" Creating Namespace")]),e._v(" "),a("p",[e._v("Before installing the CSI Driver from the OpenShift console, create a namespace called HPE-CSI Driver. Perform the following steps to create a Namespace.")]),e._v(" "),a("ol",[a("li",[e._v("Click Administration → Namespaces in the left pane of the Console.")]),e._v(" "),a("li",[e._v("Click Create Namespaces.")]),e._v(" "),a("li",[e._v("In the Create Namespace dialog box -> enter HPE- CSI.")]),e._v(" "),a("li",[e._v("Click Create.")])]),e._v(" "),a("h3",{attrs:{id:"installing-red-hat-hpe-csi-driver-operator-using-the-operator-hub"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#installing-red-hat-hpe-csi-driver-operator-using-the-operator-hub"}},[e._v("#")]),e._v(" Installing Red Hat HPE CSI Driver Operator using the Operator Hub")]),e._v(" "),a("h4",{attrs:{id:"installing-hpe-csi-driver-operator"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#installing-hpe-csi-driver-operator"}},[e._v("#")]),e._v(" Installing HPE CSI Driver Operator")]),e._v(" "),a("ol",[a("li",[e._v("Login to the Red Hat OpenShift Container Platform Web Console.")]),e._v(" "),a("li",[e._v("Click Operators → Operator Hub.")]),e._v(" "),a("li",[e._v("Search for HPE CSI Driver Operator from the list of operators and click HPE CSI Driver operator.")]),e._v(" "),a("li",[e._v("On the HPE-CSI Operator page, click Install.")])]),e._v(" "),a("p",[a("img",{attrs:{src:s(362),alt:""}})]),e._v(" "),a("ol",{attrs:{start:"5"}},[a("li",[e._v("On the Create Operator Subscription page, the Installation Mode, Update Channel and Approval Strategy options are available.")])]),e._v(" "),a("p",[a("img",{attrs:{src:s(363),alt:""}})]),e._v(" "),a("ol",{attrs:{start:"6"}},[a("li",[e._v("Select an Approval Strategy. The available options are:")])]),e._v(" "),a("ul",[a("li",[e._v("Automatic: Specifies that the OpenShift Container Platform is required to upgrade HPE CSI Storage automatically. Select the Automatic option.")]),e._v(" "),a("li",[e._v("Manual: Specifies that you need to upgrade to OpenShift Container Platform manually.")])]),e._v(" "),a("ol",{attrs:{start:"7"}},[a("li",[e._v("Click "),a("strong",[e._v("Subscribe")]),e._v(".")]),e._v(" "),a("li",[e._v("The Installed Operators page is displayed with the status of the operator as shown.")])]),e._v(" "),a("p",[a("img",{attrs:{src:s(364),alt:""}})]),e._v(" "),a("h3",{attrs:{id:"creating-hpe-csi-driver"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#creating-hpe-csi-driver"}},[e._v("#")]),e._v(" Creating HPE CSI driver")]),e._v(" "),a("p",[e._v("The HPE CSI Driver allows any vendor or project to develop its own Container Storage Provider by using the "),a("a",{attrs:{href:"https://developer.hpe.com/api/hpe-nimble-csp/",target:"_blank",rel:"noopener noreferrer"}},[e._v("CSP specification"),a("OutboundLink")],1),e._v(". This makes it very easy for third- parties to integrate their storage solution into Kubernetes as all the intricacies are taken care of by the HPE CSI Driver.")]),e._v(" "),a("p",[e._v("To create HPE CSI driver, perform the following steps.")]),e._v(" "),a("ol",[a("li",[e._v("Click Operators → Installed Operators from the left pane of the OpenShift Web Console to view the installed operators.")]),e._v(" "),a("li",[e._v("On the Installed Operator page, select HPE CSI Driver from the Project drop down list to switch to the HPE-CSI project")]),e._v(" "),a("li",[e._v("Click HPE CSI Driver.")]),e._v(" "),a("li",[e._v("On the HPE CSI Driver Operator page, scroll right and click the HPE CSI Driver yaml file.")]),e._v(" "),a("li",[e._v("Edit the HPE CSI Driver yaml file with required values like backend (3PAR array IP), password and username as shown.")])]),e._v(" "),a("p",[a("img",{attrs:{src:s(365),alt:""}})]),e._v(" "),a("ol",{attrs:{start:"6"}},[a("li",[e._v("On the HPE CSI Driver Operator page, scroll right and click the HPECSI Driver tab as shown.")])]),e._v(" "),a("p",[a("img",{attrs:{src:s(366),alt:""}})]),e._v(" "),a("h4",{attrs:{id:"verifying-creation-of-hpe-csi-driver"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#verifying-creation-of-hpe-csi-driver"}},[e._v("#")]),e._v(" Verifying creation of HPE CSI Driver")]),e._v(" "),a("p",[e._v("After the HPECSI Driver is deployed, one can see the associated deployment pods being created such as hpe-csi-controller, hpe-csi-driver, and primera3par-csp.")]),e._v(" "),a("p",[a("img",{attrs:{src:s(367),alt:""}})]),e._v(" "),a("p",[e._v("To verify the HPE CSI Node Info, perform the following steps.")]),e._v(" "),a("ol",[a("li",[e._v("Run the following command from the Installer VM to check HPENodeinfo and network status of worker nodes.")])]),e._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# oc get HPENodeInfo")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# oc get HPENodeInfo/<workernode fqdn> -o yaml")]),e._v("\n")])])]),a("p",[a("img",{attrs:{src:s(368),alt:""}})]),e._v(" "),a("h4",{attrs:{id:"hpe-csi-driver-storage-installation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hpe-csi-driver-storage-installation"}},[e._v("#")]),e._v(" HPE CSI Driver Storage installation")]),e._v(" "),a("p",[e._v("After installing HPE CSI Driver, Storage Class is created manually.")]),e._v(" "),a("ol",[a("li",[e._v("From the OpenShift console navigate to Storage -> Storage Class")]),e._v(" "),a("li",[e._v("Click Create Storage Class -> Click Edit yaml -> insert the parameters for SC creation -> Click Create.")]),e._v(" "),a("li",[e._v("‘hpe-standard’ storage class is created as shown.")])]),e._v(" "),a("p",[a("img",{attrs:{src:s(369),alt:""}})]),e._v(" "),a("p",[e._v("Run the following command on the CLI  to tag the storage class default- storage class by :")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# oc annotate storageclass hpe-standard storageclass.kubernetes.io/is-default-class=true")]),e._v("\n")])])]),a("p",[e._v("The create Storage Class yaml file parameters are as follows:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("apiVersion: storage.k8s.io/v1\nkind: StorageClass\nmetadata:\n  name: hpe-standard\nprovisioner: csi.hpe.com\nparameters:\n  csi.storage.k8s.io/fstype: ext4\n  csi.storage.k8s.io/controller-expand-secret-name: primera3par-secret\n  csi.storage.k8s.io/controller-expand-secret-namespace: hpe-csi\n  csi.storage.k8s.io/controller-publish-secret-name: primera3par-secret\n  csi.storage.k8s.io/controller-publish-secret-namespace: hpe-csi\n  csi.storage.k8s.io/node-publish-secret-name: primera3par-secret\n  csi.storage.k8s.io/node-publish-secret-namespace: hpe-csi\n  csi.storage.k8s.io/node-stage-secret-name: primera3par-secret\n  csi.storage.k8s.io/node-stage-secret-namespace: hpe-csi\n  csi.storage.k8s.io/provisioner-secret-name: primera3par-secret\n  csi.storage.k8s.io/provisioner-secret-namespace: hpe-csi\n  cpg: SSD_r6 \n  provisioning_type: tpvv\n  accessProtocol: iscsi\nreclaimPolicy: Delete\nallowVolumeExpansion: true\n")])])]),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[e._v("Note")]),e._v(" "),a("p",[e._v("From the worker node, ssh to the 3PAR array to check on the cpg values for Storage Class creation as shown.")])]),e._v(" "),a("p",[a("img",{attrs:{src:s(370),alt:""}})]),e._v(" "),a("h4",{attrs:{id:"sample-application-deployment"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-application-deployment"}},[e._v("#")]),e._v(" Sample application deployment")]),e._v(" "),a("p",[e._v("A sample application deployed on the existing Red Hat OpenShift Container Platform utilizes the volume from 3PAR array through HPE CSI Driver. A sample application such as mongodb or mariadb is deployed and scheduled on the worker nodes. Follow the steps to deploy a sample application.")]),e._v(" "),a("ol",[a("li",[e._v("Run the following command to deploy a sample application.")])]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# oc new-app mongodb-persistent")]),e._v("\n")])])]),a("p",[e._v("Output:\n"),a("img",{attrs:{src:s(371),alt:""}})]),e._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[e._v("Check the status of PVC and Pod.")])]),e._v(" "),a("p",[a("img",{attrs:{src:s(372),alt:""}})]),e._v(" "),a("p",[e._v("List of pods created on the cluster along with the one for sample application deployed is shown.")]),e._v(" "),a("p",[a("img",{attrs:{src:s(373),alt:""}})]),e._v(" "),a("p",[e._v("PVC for the sample application deployed is created and bound. This can be verified in the OpenShift Console by navigating to Storage -> Persistent Volume Claim section.")]),e._v(" "),a("p",[a("img",{attrs:{src:s(374),alt:""}})]),e._v(" "),a("h4",{attrs:{id:"verification-of-persistent-volume-claim-on-3par-array"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#verification-of-persistent-volume-claim-on-3par-array"}},[e._v("#")]),e._v(" Verification of Persistent Volume Claim on 3PAR array")]),e._v(" "),a("p",[e._v("The PVC created for the sample application deployed (mongodb) can be verified on the 3PAR array by searching for the PVC id seen on the console or on the CLI.")]),e._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[e._v("Note")]),e._v(" "),a("p",[e._v("The PVC ID is not completely seen on 3PAR console as it gets truncated beyond 30 characters.")])]),e._v(" "),a("p",[e._v("Steps to verify the PVC on 3PAR array:")]),e._v(" "),a("ol",[a("li",[e._v("Login to the 3PAR SSMC URL at https://10.0.20.19:8443/#/login with appropriate credentials.")]),e._v(" "),a("li",[e._v("Navigate from the drop- down menu option on 3PAR StoreServ -> Virtual volumes")]),e._v(" "),a("li",[e._v("The volume for the PVC created can be seen under the list of virtual volume as shown.")])]),e._v(" "),a("p",[a("img",{attrs:{src:s(375),alt:""}})]),e._v(" "),a("h4",{attrs:{id:"openshift-persistent-volume-expansion"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#openshift-persistent-volume-expansion"}},[e._v("#")]),e._v(" OpenShift Persistent Volume Expansion")]),e._v(" "),a("p",[e._v("The volume of the sample application deployed can be expanded by specifying the volume size on the OpenShift console. The steps for PVC expansion is as follows.")]),e._v(" "),a("ol",[a("li",[e._v("On the OpenShift web console navigate to Storage -> Persistent Volume Claims -> select a specific pod -> click on the dots seen towards the right side -> select ‘Expand PVC’")])]),e._v(" "),a("p",[a("img",{attrs:{src:s(376),alt:""}})]),e._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[e._v("Change the volume size from 1Gi to 3Gi and click Expand button as shown.")])]),e._v(" "),a("p",[a("img",{attrs:{src:s(377),alt:""}})]),e._v(" "),a("ol",{attrs:{start:"3"}},[a("li",[e._v("Now, you can see PVC and PV has been resized to 3 GB.")])]),e._v(" "),a("p",[a("img",{attrs:{src:s(378),alt:""}})]),e._v(" "),a("h1",{attrs:{id:"deploying-hpe-3par-fc-storage-on-ocp-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#deploying-hpe-3par-fc-storage-on-ocp-4"}},[e._v("#")]),e._v(" Deploying HPE 3PAR FC Storage on OCP 4")]),e._v(" "),a("p",[e._v("From the CSI driver section till verifying creation of CSI driver, there is no change in the procedure. Follow the steps as listed in the previous section.")]),e._v(" "),a("h2",{attrs:{id:"hpe-csi-driver-storage-installation-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hpe-csi-driver-storage-installation-2"}},[e._v("#")]),e._v(" HPE CSI Driver storage installation")]),e._v(" "),a("p",[e._v("After installing HPE CSI Driver, Storage Class is created manually.")]),e._v(" "),a("ol",[a("li",[e._v("From the OpenShift console navigate to Storage -> Storage Class")]),e._v(" "),a("li",[e._v("Click Create Storage Class -> Click Edit yaml -> insert the parameters for SC creation -> Click Create.")]),e._v(" "),a("li",[e._v("‘hpe-standard’ storage class is created as shown.\n"),a("img",{attrs:{src:s(379),alt:""}})])]),e._v(" "),a("p",[e._v("Run the following command on the CLI  to tag the storage class default- storage class.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("# oc annotate storageclass hpe-standard storageclass.kubernetes.io/is-default-class=true\nThe create Storage Class yaml file parameters are as follows: \napiVersion: storage.k8s.io/v1\nkind: StorageClass\nmetadata:\n  name: hpe-standard\nprovisioner: csi.hpe.com\nparameters:\n  csi.storage.k8s.io/fstype: ext4\n  csi.storage.k8s.io/controller-expand-secret-name: primera3par-secret\n  csi.storage.k8s.io/controller-expand-secret-namespace: hpe-csi\n  csi.storage.k8s.io/controller-publish-secret-name: primera3par-secret\n  csi.storage.k8s.io/controller-publish-secret-namespace: hpe-csi\n  csi.storage.k8s.io/node-publish-secret-name: primera3par-secret\n  csi.storage.k8s.io/node-publish-secret-namespace: hpe-csi\n  csi.storage.k8s.io/node-stage-secret-name: primera3par-secret\n  csi.storage.k8s.io/node-stage-secret-namespace: hpe-csi\n  csi.storage.k8s.io/provisioner-secret-name: primera3par-secret\n  csi.storage.k8s.io/provisioner-secret-namespace: hpe-csi\n  cpg: SSD_r6 \n  provisioning_type: tpvv\n  accessProtocol: FC\nreclaimPolicy: Delete\nallowVolumeExpansion: true\n")])])]),a("h3",{attrs:{id:"sample-application-deployment-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-application-deployment-2"}},[e._v("#")]),e._v(" Sample application deployment")]),e._v(" "),a("p",[e._v("A sample application deployed on the existing Red Hat OpenShift Container Platform utilizes the volume from 3PAR array through HPE CSI Driver. A sample application such as mongodb or mariadb is deployed and scheduled on the worker nodes. Follow the steps to deploy a sample application.\nSteps:")]),e._v(" "),a("ol",[a("li",[e._v("Run the following command to deploy a sample application.")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("# oc new-app mongodb-persistent\n")])])]),a("p",[e._v("Output:\n"),a("img",{attrs:{src:s(380),alt:""}})]),e._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[e._v("Check the status of PV and PVC.\n"),a("img",{attrs:{src:s(381),alt:""}})])]),e._v(" "),a("p",[a("img",{attrs:{src:s(382),alt:""}})]),e._v(" "),a("p",[e._v("List of pods created on the cluster along with the one for sample application deployed is shown.")]),e._v(" "),a("p",[a("img",{attrs:{src:s(383),alt:""}})]),e._v(" "),a("h3",{attrs:{id:"openshift-persistent-volume-expansion-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#openshift-persistent-volume-expansion-2"}},[e._v("#")]),e._v(" OpenShift Persistent Volume Expansion")]),e._v(" "),a("p",[e._v("The volume of the sample application deployed can be expanded by specifying the volume size on the OpenShift console. The steps for PVC expansion is as follows.")]),e._v(" "),a("ol",[a("li",[e._v("On the OpenShift web console navigate to Storage -> Persistent Volume Claims -> select a specific pod -> click on the dots seen towards the right side -> select ‘Expand PVC’")])]),e._v(" "),a("p",[a("img",{attrs:{src:s(384),alt:""}})]),e._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[e._v("Change the volume size from 1Gi to 5Gi and click Expand button as shown.")])]),e._v(" "),a("p",[a("img",{attrs:{src:s(385),alt:""}})]),e._v(" "),a("ol",{attrs:{start:"3"}},[a("li",[e._v("Now, you can see PVC and PV has been resized to 5 GB.")])]),e._v(" "),a("p",[a("img",{attrs:{src:s(386),alt:""}})]),e._v(" "),a("h1",{attrs:{id:"deploying-hpe-csi-driver-nimble-storage-on-ocp-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#deploying-hpe-csi-driver-nimble-storage-on-ocp-4"}},[e._v("#")]),e._v(" Deploying HPE CSI Driver Nimble Storage on OCP 4")]),e._v(" "),a("p",[e._v("The sections CSI driver architecture, SCC and HPE CSI driver storage installation are the same as listed.")]),e._v(" "),a("h2",{attrs:{id:"configuring-iscsi-interface-on-worker-nodes-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#configuring-iscsi-interface-on-worker-nodes-2"}},[e._v("#")]),e._v(" Configuring iSCSI interface on worker nodes")]),e._v(" "),a("p",[e._v("Additional iSCSI interface needs to be configured on all the worker nodes (physical and virtual) for establishing the connection between the OCP cluster and HPE Nimble array. iSCSI_A and iSCSI_B interfaces needs to be configured on the worker nodes for redundancy. Follow the steps as- listed to configure the additional interface.")]),e._v(" "),a("ol",[a("li",[e._v("Create interface configuration files (ifcfg files) on each of the worker nodes by specifying the following parameters.")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("HWADDR=52:4D:1F:20:01:94 (MAC address of the iSCSI connector)\nTYPE=Ethernet\nBOOTPROTO=none\nIPADDR=40.0.17.221 \nPREFIX=16\nDNS1= 20.1.1.254\nONBOOT=yes\n")])])]),a("ol",{attrs:{start:"2"}},[a("li",[e._v("Reboot the worker nodes after configuring the ifcfg files. The Nimble Discovery IP should be pingable.")])]),e._v(" "),a("p",[a("img",{attrs:{src:s(387),alt:""}})]),e._v(" "),a("p",[e._v("For virtual worker nodes, additional Network adapters are added and the corresponding network port groups are selected.")]),e._v(" "),a("p",[a("img",{attrs:{src:s(388),alt:""}})]),e._v(" "),a("h3",{attrs:{id:"iscsi-interface-for-physical-worker-nodes-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#iscsi-interface-for-physical-worker-nodes-2"}},[e._v("#")]),e._v(" iSCSI Interface for Physical worker nodes")]),e._v(" "),a("p",[e._v("For Physical worker nodes, the server profile is configured with iSCSI_A connection for storage interface and additional iSCSI_B connection is added to the server profile for redundancy.")]),e._v(" "),a("p",[a("img",{attrs:{src:s(389),alt:""}})]),e._v(" "),a("h3",{attrs:{id:"sample-application-deployment-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-application-deployment-3"}},[e._v("#")]),e._v(" Sample application deployment")]),e._v(" "),a("p",[e._v("A sample application deployed on the existing RedHat OpenShift Container Platform utilizes the volume from Nimble array through HPE CSI Driver. A sample application such as mongodb or mariadb is deployed and scheduled on the worker nodes.")]),e._v(" "),a("ol",[a("li",[e._v("Use the following command to deploy a sample application.")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("# oc new-app mongodb-persistent\n")])])]),a("p",[e._v("The output is as follows.\n"),a("img",{attrs:{src:s(390),alt:""}})]),e._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[e._v("Check the status of PVC and pod.\n"),a("img",{attrs:{src:s(391),alt:""}})])]),e._v(" "),a("p",[a("img",{attrs:{src:s(392),alt:""}})]),e._v(" "),a("h3",{attrs:{id:"openshift-persistent-volume-expansion-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#openshift-persistent-volume-expansion-3"}},[e._v("#")]),e._v(" OpenShift Persistent Volume Expansion")]),e._v(" "),a("p",[e._v("The volume of the sample application deployed can be expanded by specifying the volume size on the OpenShift console. The steps for PVC expansion is listed as follows.")]),e._v(" "),a("ol",[a("li",[e._v("On the OpenShift web console navigate to Storage -> Persistent Volume Claims -> select a specific pod -> click on the dots seen towards the right side -> select ‘Expand PVC’")])]),e._v(" "),a("p",[a("img",{attrs:{src:s(393),alt:""}})]),e._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[e._v("Change the volume size from 1Gi to 3Gi and click Expand button.")])]),e._v(" "),a("p",[a("img",{attrs:{src:s(394),alt:""}})]),e._v(" "),a("ol",{attrs:{start:"3"}},[a("li",[e._v("Now you can see PVC and PV has been resized to 3 GB.")])]),e._v(" "),a("p",[a("img",{attrs:{src:s(395),alt:""}})])])}),[],!1,null,null,null);t.default=r.exports}}]);