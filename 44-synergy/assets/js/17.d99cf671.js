(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{384:function(e,t,s){e.exports=s.p+"assets/img/figure23.8b69992d.jpg"},489:function(e,t,s){"use strict";s.r(t);var a=s(42),n=Object(a.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"operating-system-deployment"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#operating-system-deployment"}},[e._v("#")]),e._v(" Operating system deployment")]),e._v(" "),a("h2",{attrs:{id:"rhel-deployment-using-pxe-server"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rhel-deployment-using-pxe-server"}},[e._v("#")]),e._v(" RHEL deployment using PXE server")]),e._v(" "),a("p",[e._v("In this solution, a PXE server is used for RHEL 7.x OS deployment and is configured on CentOS (version: CentOS Linux release 7.6.1810 (Core)). The PXE server uses the FTP service for file distribution, but can be altered to support HTTP or NFS. This section highlights the steps to configure a PXE server.")]),e._v(" "),a("h3",{attrs:{id:"procedure-for-setting-up-pxe-server-and-deploying-rhel-os"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#procedure-for-setting-up-pxe-server-and-deploying-rhel-os"}},[e._v("#")]),e._v(" Procedure for setting up PXE server and deploying RHEL OS")]),e._v(" "),a("ol",[a("li",[a("p",[e._v("Login to the CentOS server to be configured as a PXE server as a user that can run commands as root via sudo.")])]),e._v(" "),a("li",[a("p",[e._v("Use the following command to install packages such as DHCP, TFTP-server, vSFTPD (FTP server), and xinetd.")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" yum "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v(" dhcp tftp tftp-server syslinux vsftpd xinetd\n")])])])]),e._v(" "),a("li",[a("p",[e._v("Update the DHCP configuration file at "),a("em",[e._v("/etc/dhcp/dhcpd.conf")]),e._v(" with the MAC addresses, IP addresses, DNS, and routing details of the installation environment. Domain search is optional. A sample DHCP configuration file is shown as follows.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('ddns-update-style interim;\nignore client-updates;\nauthoritative;\nallow booting;\nallow bootp;\n\n# internal subnet for my DHCP Server\nsubnet 20.0.x.x netmask 255.0.0.0 {\nrange 20.0.x.x 20.0.x.x;\ndeny unknown-clients;\noption domain-name-servers 20.x.x.x;\noption domain-name "twentynet.local";\noption routers 20.x.x.x;\noption broadcast-address 20.255.255.255;\ndefault-lease-time 600;\nmax-lease-time 7200;\nnext-server 20.x.x.x;\nfilename "pxelinux.0";\n}\n\n#######################################\nhost bootstrap {\nhardware ethernet 00:50:56:xx:98:df;\nfixed-address 20.0.x.x;\n}\nhost master01 {\nhardware ethernet 00:50:56:95:xx:82;\nfixed-address 20.0.x.x;\n}\nhost worker01 {\nhardware ethernet 00:50:56:xx:ab:82;\nfixed-address 20.0.x.x;\n}\n')])])])]),e._v(" "),a("li",[a("p",[e._v("Trivial File Transfer Protocol (TFTP) is used to transfer files from data server to clients without any kind of authentication. TFTP is used for ignition file loading in PXE-based environment. To configure the TFTP server, edit the configuration file "),a("em",[e._v("/etc/xinetd.d/tftp")]),e._v(". Change the parameter ‘disable = yes’ to ‘disable = no’ and leave the other parameters as is. To edit the "),a("em",[e._v("/etc/xinetd.d/tftp")]),e._v(" file, execute the following command.")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("vi")]),e._v("  /etc/xinetd.d/tftp\n")])])]),a("p",[e._v("The TFTP configuration file is as follows.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("service tftp\n   {\n\n        socket_type = dgram\n        protocol = udp\n        wait = yes\n        user = root\n        server = /usr/sbin/in.tftpd\n        server_args = -s /var/lib/tftpboot\n        disable = no\n        per_source = 11\n        cps = 100 2\n        flags = IPv4\n    }\n")])])]),a("p",[e._v("Network boot related files must be placed in the tftp root directory "),a("em",[e._v("/var/lib/tftpboot")]),e._v(". Run the following commands to copy the required network boot files to "),a("em",[e._v("/var/lib/tftpboot/")]),e._v(".")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("cp")]),e._v(" –v /usr/share/syslinux/pxelinux.0 /var/lib/tftpboot\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("cp")]),e._v(" –v /usr/share/syslinux/menu.c32 /var/lib/tftpboot\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("cp")]),e._v(" –v /usr/share/syslinux/memdisk /var/lib/tftpboot\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("cp")]),e._v(" –v /usr/share/syslinux/mboot.c32 /var/lib/tftpboot\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("cp")]),e._v(" –v /usr/share/syslinux/chain.c32 /var/lib/tftpboot\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("mkdir")]),e._v(" /var/lib/tftpboot/pxelinux.cfg\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("mkdir")]),e._v(" /var/lib/tftpboot/networkboot\n")])])])]),e._v(" "),a("li",[a("p",[e._v("Copy the RHEL 7.6 (or higher version) ISO files to the PXE server. Mount it to the "),a("em",[e._v("/mnt/")]),e._v(" directory and then copy the contents of the ISO to the local FTP server using the following commands.")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("mount")]),e._v(" –o loop "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("&")]),e._v("lt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("OS "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("file")]),e._v(" name"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("&")]),e._v("gt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v(" /mnt/\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("cd")]),e._v(" /mnt/\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("cp")]),e._v(" –av * /var/ftp/pub/\n")])])])]),e._v(" "),a("li",[a("p",[e._v("Copy the kernel file (vmlinuz) and initrd file from "),a("em",[e._v("/mnt")]),e._v(" to "),a("em",[e._v("/var/lib/tftpboot/networkboot/")]),e._v(" using the following commands.")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("cp")]),e._v(" /mnt/images/pxeboot/vmlinuz /var/lib/tftpboot/networkboot/\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("cp")]),e._v(" /mnt/images/pxeboot/initrd.img /var/lib/tftpboot/networkboot\n")])])])]),e._v(" "),a("li",[a("p",[e._v("Use the following command to unmount the ISO files.")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" unmount /mnt/\n")])])])]),e._v(" "),a("li",[a("p",[e._v("For RHEL nodes, create and utilize a new kickstart file under the folder "),a("em",[e._v("/var/ftp/pub")]),e._v(" with the name “"),a("em",[e._v("rhel7.cfg")]),e._v("” using the following command.")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("vi")]),e._v(" /var/ftp/pub/rhel7.cfg\n")])])]),a("p",[e._v("A sample kickstart file is shown as follows. The installation user should create a kickstart file to meet the requirements of their installation environment.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('firewall --disabled\n# Install OS instead of upgrade\ninstall\n# Use FTP installation media\nurl --url="ftp://&lt;FTP_server_IP_address&gt;/pub/rhel76/"\n# Root password\n# root password can be plaintext as shown below\n# rootpw –plaintext &lt;password&gt;\n# root password is encrypted using the command “openssl passwd -1 &lt;password&gt;” and resultant output is provided for rootpw as shown below\nrootpw --iscrypted $6$uiq8l/7xEWsYXhrvaEgan4N21yhLa8K.U7UA12Th3PD11GOXvEcI40gp\n# System authorization information\nauth useshadow passalgo=sha512\n# Use graphical install\ngraphical\nfirstboot disable\n# System keyboard, timezone, language\nkeyboard us\ntimezone Europe/Amsterdam\nlang en_US\n# SELinux configuration\nselinux disabled\n# Installation logging level\nlogging level=info\n# System bootloader configuration\nbootloader location=mbr\nclearpart --all --initlabel\npart swap --asprimary --fstype="swap" --size=1\npart /boot --fstype xfs --size=300\npart pv.01 --size=1 --grow\nvolgroup root_vg01 pv.01\nlogvol / --fstype xfs --name=lv_01 --vgname=root_vg01 --size=1 --grow\n%packages\n@^minimal\n@core\n%end\n%addon com_redhat_kdump --disable --reserve-mb=\'auto\'\n%end\n')])])])]),e._v(" "),a("li",[a("p",[e._v("Create a PXE menu. Use the following command to create a PXE menu file at the location "),a("em",[e._v("/var/lib/tftpboot/pxelinux.cfg/default")])]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("  "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("vi")]),e._v(" /var/lib/tftpboot/pxelinux.cfg/default\n")])])]),a("p",[e._v("For each of the OS boot options, provide the following details:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("- MENU LABEL : Custom name of the respective menu label.\n- KERNEL : Kernel details of the operating system.\n- APPEND : Path of bootloader file along with path of cfg or configuration file (in case of RHEL).\n")])])]),a("p",[e._v("A sample PXE menu is as follows.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("default menu.c32\n\nprompt 0\n\ntimeout 30\n\nMENU TITLE LinuxTechi.com PXE Menu\n\nLABEL rhel76\n\nMENU LABEL RHEL76-Buedata\n\nKERNEL /rhel76/vmlinuz\n\nAPPEND initrd=/rhel76/initrd.img inst.repo=ftp://&lt;FTP_server_IP_address&gt;/pub/rhel76 ks=ftp://&lt;FTP_server_IP_address&gt;/pub/rhel76-hcp.cfg\n\nLABEL rhcos-bootstrap\n\nMENU LABEL Install RHCOS4.3 sec-Bootstrap\n\nKERNEL /networkboot/rhcos-4.3.0-x86_64-installer-kernel\n\nAPPEND ip=dhcp rd.neednet=1 initrd=/networkboot/rhcos-4.3.0-x86_64-installer-initramfs.img console=tty0 console=ttyS0 coreos.inst=yes coreos.inst.install_dev=sda coreos.inst.image_url= ftp://&lt;FTP_server_IP_address&gt;/pub/rhcos-4.3.0-x86_64-metal-bios.raw.gz coreos.inst.ignition_url= ftp://&lt;FTP_server_IP_address&gt;/pub/sec/bootstrap.ign\n\nLABEL rhcos-master\n\nMENU LABEL Install RHCOS4.2 sec-Master\n\nKERNEL /networkboot/rhcos-4.3.0-x86_64-installer-kernel\n\nAPPEND ip=dhcp rd.neednet=1 initrd=/networkboot/rhcos-4.3.0-x86_64-installer-initramfs.img console=tty0 console=ttyS0 coreos.inst=yes coreos.inst.install_dev=sda coreos.inst.image_url= ftp://&lt;FTP_server_IP_address&gt;/pub/rhcos-4.3.0-x86_64-metal-bios.raw.gz coreos.inst.ignition_url=ftp://&lt;FTP_server_IP_address&gt;/pub/sec/master.ign\n\nLABEL rhcos-worker\n\nMENU LABEL Install RHCOS4.2 sec-Worker\n\nKERNEL /networkboot/rhcos-4.3.0-x86_64-installer-kernel\n\nAPPEND ip=dhcp rd.neednet=1 initrd=/networkboot/rhcos-4.3.0-x86_64-installer-initramfs.img console=tty0 console=ttyS0 coreos.inst=yes coreos.inst.install_dev=sda coreos.inst.image_url= ftp://&lt;FTP_server_IP_address&gt;/pub/rhcos-4.3.0-x86_64-metal-bios.raw.gz coreos.inst.ignition_url=ftp://&lt;FTP_server_IP_address&gt;/pub/sec/worker.ign\n")])])])]),e._v(" "),a("li",[a("p",[e._v("Use the following command to start and enable xinetd, dhcpd, and vsftpd.")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("    "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" systemctl start xinetd\n\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" systemctl "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("enable")]),e._v(" xinetd\n\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" systemctl start dhcpd.service\n\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" systemctl "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("enable")]),e._v(" dhcpd.service\n\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" systemctl start vsftpd\n\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" systemctl "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("enable")]),e._v(" vsftpd\n")])])])]),e._v(" "),a("li",[a("p",[e._v("Configure SELinux for FTP.")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" setsebool –P allow_ftpd_full_access "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),e._v("\n")])])])]),e._v(" "),a("li",[a("p",[e._v("Open ports in the firewall using the following firewall-cmd commands.")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" firewall-cmd --add-service-ftp --permanent\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("sudo firewall-cmd --add-service-dhcp --permanent\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("sudo firewall-cmd –reload\n")])])])])]),e._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[e._v("Note")]),e._v(" "),a("p",[e._v("It is crucial to generate ignition files, copy them to the TFTP server, and update the path in the PXE default file. For more information about generating the ignition files, refer to the "),a("a",{attrs:{href:"./Preparing-execution-environment#kubernetes-manifests-and-ignition-files"}},[e._v("Kubernetes manifests and ignition files")]),e._v(" section in this document.")])]),e._v(" "),a("h2",{attrs:{id:"red-hat-coreos-deployment-using-ipxe-server"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#red-hat-coreos-deployment-using-ipxe-server"}},[e._v("#")]),e._v(" Red Hat CoreOS deployment using iPXE server")]),e._v(" "),a("p",[e._v("In this solution, an iPXE Server setup is used for Red Hat Enterprise Linux CoreOS (RHCOS) deployment. This section explains in detail the playbooks required to configure iPXE server on an RHEL 7.6 VM  to perform an unattended installation of Red Hat Enterprise Linux CoreOS (RHCOS) for non-ESXi VMs and bare metal servers.")]),e._v(" "),a("h3",{attrs:{id:"prerequisites"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#prerequisites"}},[e._v("#")]),e._v(" Prerequisites")]),e._v(" "),a("ol",[a("li",[e._v("RHEL Ansible engine VM with Ansible 2.9.x and Python 3.6.x.")])]),e._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[e._v("Note")]),e._v(" "),a("p",[e._v("Ansible Engine is configured as mentioned in the "),a("a",{attrs:{href:"./Preparing-execution-environment#installer-machine"}},[e._v("Installer machine")]),e._v(" section.")])]),e._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[a("p",[e._v("If the user wishes to setup the iPXE server on a separate RHEL 7.6 VM (other than the Ansible engine VM) preferably or could be bare metal server, they need to have the following minimum configuration:")]),e._v(" "),a("ul",[a("li",[e._v("At least 200 GB disk space")]),e._v(" "),a("li",[e._v("Two (2) CPU cores")]),e._v(" "),a("li",[e._v("8 GB RAM")]),e._v(" "),a("li",[e._v("/var has at least 15 GB disk space allocated while partitioning")]),e._v(" "),a("li",[e._v("Static IP on the same network as the RHCOS server")]),e._v(" "),a("li",[e._v("Internet access")])])]),e._v(" "),a("li",[a("p",[e._v("​\tDisable Selinux using following steps:")]),e._v(" "),a("ol",[a("li",[a("p",[e._v("Check the status of SELINUX using the command /etc/selinux/config")])]),e._v(" "),a("li",[a("p",[e._v("Disable SELINUX.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("$ sudo sed -i 's/permissive/disabled/g' /etc/selinux/config \n")])])]),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[e._v("Note")]),e._v(" "),a("p",[e._v('If the current state of "selinux" is "enforcing," replace the keyword "permissive" in the above command with "enforcing" and then run it.')])])]),e._v(" "),a("li",[a("p",[e._v("Reboot the RHEL machine.")])]),e._v(" "),a("li",[a("p",[e._v("Use /etc/selinux/config  command to check the status of SELINUX.")])])])])]),e._v(" "),a("h3",{attrs:{id:"automated-installation-and-configuration-of-ipxe-server"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#automated-installation-and-configuration-of-ipxe-server"}},[e._v("#")]),e._v(" Automated Installation and Configuration of iPXE server")]),e._v(" "),a("p",[e._v("Perform the steps listed to execute the playbooks for installing and configuring iPXE server.")]),e._v(" "),a("ol",[a("li",[a("p",[e._v("Browse to the following directory on the Ansible engine.")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("$ "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("cd")]),e._v(" BASE_DIR/os_deployment/deploy_rhcos/\n")])])]),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[e._v("Note")]),e._v(" "),a("p",[e._v("Refer to "),a("a",{attrs:{href:"./Preparing-execution-environment#installer-machine"}},[e._v("Installer machine")]),e._v(' section to know the "BASE_DIR" path.')])])]),e._v(" "),a("li",[a("p",[e._v("Copy Red Hat OpenShift 4.x above install files to directory, preferably under /tmp/ Example: /tmp/image/")])]),e._v(" "),a("li",[a("p",[e._v('Update the inventory file "hosts" with the RHEL machine IP on which the user is trying to setup the iPXE server.')]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("ansible_host"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("20")]),e._v(".x.x.x\n")])])])]),e._v(" "),a("li",[a("p",[e._v("Update the "),a("em",[e._v("secrets.yml")]),e._v(" file located in BASE_DIR/os_deployment/deploy_rhcos/secrets.yml. Use the following command to edit secrets.yml file.")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" ansible-vault edit "),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$BASE_DIR")]),e._v("/os_deployment/deploy_rhcos/secrets.yml\n")])])])])]),e._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[e._v("Note")]),e._v(" "),a("ul",[a("li",[e._v("Refer to "),a("a",{attrs:{href:"./Preparing-execution-environment#installer-machine"}},[e._v("Installer machine")]),e._v(' section to know the "BASE_DIR" .')]),e._v(" "),a("li",[e._v("The default password for the Ansible vault file is "),a("em",[e._v("changeme.")])])])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(' #####################################################################\n # Details of Ansible User Credentials required to set up the iPXE\n  ###Common Networking\n  # Interface Name Example: interface_name: enp0s10f0\n  interface_name: <interface_name>\n  \n  # Ansible Host IP Example: ansible_engine_ip: 20.0.15.115\n  ansible_engine_ip: <ansible_engine_ip>\n\n  # base DNS domain, Example: base_domain: ocp42.local\n  base_domain: <base_domain>\n\n  # Openshift sub domain, Example:app_domain: apps.ocp42.local\n  app_domain: <app_domain>\n\n  # Network router IP Example: gateway: 192.168.42.254\n  gateway: <gateway>\n\n  # Network DNS server Example: dns_server: 192.168.42.252\n  dns_server: <dns_server>\n\n  # DHCP range that is used for OCP nodes Example: dhcp_range: 192.168.42.204,192.168.42.210,24h\n  dhcp_range: <dhcp_range>\n    \n  # Subnet Mask Example: net_mask: 255.255.240.0\n  net_mask: <net_mask>\n    \n  ## OpenShift node network\n  # mac address of master node 1 Example: master1_mac: 08:00:27:36:0A:01\n  master1_mac: <master1_mac>\n    \n  # master node 1 IP address Example: master1_ip: 192.168.42.204\n  master1_ip: <master1_ip>\n    \n  # master node 2 mac address Example: master2_mac: 08:00:27:36:0A:02\n  master2_mac: <master2_mac>\n\n  # master node 2 IP address Example: master2_ip: 192.168.42.205\n  master2_ip: <master2_ip>\n\n  # master node 3 mac address Example: master3_mac: 08:00:27:36:0A:03\n  master3_mac: <master3_mac>\n\n  # master node 3 IP address Example: master3_ip: 192.168.42.206\n  master3_ip: <master3_ip>\n\n  # worker node 1 mac address Example: worker1_mac: 08:00:27:36:0A:04\n  worker1_mac: <worker1_mac>\n\n  # worker node 1 IP address Example: worker1_ip: 192.168.42.207\n  worker1_ip: <worker1_ip>\n\n  # worker node 2 mac address Example: worker2_mac: 08:00:27:36:0A:05\n  worker2_mac: <worker2_mac>\n\n  # worker node 2 IP address Example: worker2_ip: 192.168.42.208\n  worker2_ip: <worker2_ip>\n\n  # worker node 3 mac address Example: worker3_mac: 08:00:27:36:0A:06\n  worker3_mac: <worker3_mac>\n    \n  # worker node 3 IP address Example: worker3_ip: 192.168.42.209\n  worker3_ip: <worker3_ip>\n    \n  # bootstrap mac address Example: bootstrap_mac: 08:00:27:36:0A:08\n  bootstrap_mac: <bootstrap_mac>\n    \n  # bootstrap IP address Example: bootstrap_ip: 192.168.42.210\n  bootstrap_ip: <bootstrap_ip>\n    \n  # install media details Example: image_location: "/tmp/image/"\n  image_location: <image_location>\n    \n  # Example: initramfs_name: rhcos-4.2.0-x86_64-installer-initramfs.img\n  initramfs_name: <initramfs_name>\n    \n  # Example: kernel_name: rhcos-4.2.0-x86_64-installer-kernel\n  kernel_name:<kernel_name>\n    \n  # Example: bios_uefi_name: rhcos-4.2.0-x86_64-metal-bios.raw.gz\n  bios_uefi_name: <bios_uefi_name>\n')])])]),a("ol",{attrs:{start:"5"}},[a("li",[a("p",[e._v("Run the following Ansible playbook to configure the iPXE server.")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("$ ansible-playbook -i hosts master.yml --ask-vault-pass\n")])])])]),e._v(" "),a("li",[a("p",[e._v("Figure 17 shows the status of after running the Ansible playbook to configure the iPXE server.")]),e._v(" "),a("p",[a("img",{attrs:{src:s(384),alt:""}})]),e._v(" "),a("p",[a("strong",[e._v("Figure 17")]),e._v(". Status of matchbox,TFTP,Xinetd and dnsmasq Services")])]),e._v(" "),a("li",[a("p",[e._v("Run the following command to test the setup with MAC address.")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("curl")]),e._v(" http://localhost:8080/ipxe?mac"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("08:00:27:36:0A:xx\n")])])])]),e._v(" "),a("li",[a("p",[e._v('Copy the ignition files in " /var/lib/matchbox/ignition " and verify the status of ignition file by using MAC address of all nodes.')]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("curl")]),e._v(" http://192.168.42.200:8080/ignition?mac"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("08:00:27:36:0A:xx\n")])])])]),e._v(" "),a("li",[a("p",[e._v("Boot the VM or bare metal using iPXE.")])])])])}),[],!1,null,null,null);t.default=n.exports}}]);