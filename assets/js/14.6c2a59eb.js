(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{277:function(e,t,a){"use strict";a.r(t);var s=a(28),n=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"physical-worker-node-labeling-in-openshift"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#physical-worker-node-labeling-in-openshift"}},[e._v("#")]),e._v(" Physical worker node labeling in OpenShift")]),e._v(" "),a("h2",{attrs:{id:"introduction"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#introduction"}},[e._v("#")]),e._v(" Introduction")]),e._v(" "),a("p",[e._v("Discovering the node properties and advertising them through node labels can be used to control workload placement in an OpenShift cluster. With OpenShift running on HPE server platforms, organizations can automate the discovery of hardware properties and use that information to schedule workloads that benefit from the different capabilities that the underlying hardware provides. Using HPE iLO and its REST or Redfish API- based discovery capabilities (proliantutils), the following properties can be discovered about the nodes:")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("Presence of GPUs")])]),e._v(" "),a("li",[a("p",[e._v("Underlying RAID configurations")])]),e._v(" "),a("li",[a("p",[e._v("Presence of disks by type")])]),e._v(" "),a("li",[a("p",[e._v("Persistent-memory availability")])]),e._v(" "),a("li",[a("p",[e._v("Status of CPU virtualization features")])]),e._v(" "),a("li",[a("p",[e._v("SR-IOV capabilities")])]),e._v(" "),a("li",[a("p",[e._v("CPU architecture")])]),e._v(" "),a("li",[a("p",[e._v("CPU core count")])]),e._v(" "),a("li",[a("p",[e._v("Platform information including model, iLO and BIOS versions")])]),e._v(" "),a("li",[a("p",[e._v("Memory capacity")])]),e._v(" "),a("li",[a("p",[e._v("UEFI Security settings")])]),e._v(" "),a("li",[a("p",[e._v("Health status of compute, storage, and network components")])])]),e._v(" "),a("p",[e._v("After these properties are discovered for the physical worker nodes, OpenShift node labeling can be applied to group nodes based on the underlying features of the nodes. By default, every node will have its node name as a label.")]),e._v(" "),a("p",[e._v("The following properties can be used to label nodes:")]),e._v(" "),a("ol",[a("li",[e._v("Overall health status of the node.")])]),e._v(" "),a("p",[e._v('If current status of "BIOS, Fans, Temperature Sensors, Battery, Processor, Memory, Network, and Storage" is ok, node health status is labeled as "Ok". Otherwise it will appear as "Degraded".')]),e._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[e._v("Overall security status of the node.")])]),e._v(" "),a("p",[e._v('If the current status of the following BIOS configuration items (which are important for security) are as expected, then security status of the node is "Ok". Otherwise, they will be labeled as "Degraded".')]),e._v(" "),a("p",[a("strong",[e._v("NOTE")])]),e._v(" "),a("p",[e._v("Based on the HPE Gen10 Security Reference Guide, the recommended values for the chosen parameters are as follows.")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("Secure Boot: Enabled")])]),e._v(" "),a("li",[a("p",[e._v("Asset tag: Locked")])]),e._v(" "),a("li",[a("p",[e._v("UEFI Shell Script Verification: Enabled")])]),e._v(" "),a("li",[a("p",[e._v("UEFI Shell Startup: Disabled")])]),e._v(" "),a("li",[a("p",[e._v("Processor AES: Enabled")])])]),e._v(" "),a("p",[e._v("For more information, refer HPE Gen10 Security Reference Guide at "),a("a",{attrs:{href:"https://support.hpe.com/hpesc/public/docDisplay?docId=a00018320en_us",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://support.hpe.com/hpesc/public/docDisplay?docId=a00018320en_us"),a("OutboundLink")],1),e._v(".")]),e._v(" "),a("ol",{attrs:{start:"3"}},[a("li",[e._v("Custom Labeling.")])]),e._v(" "),a("p",[e._v("User defined labels (key, value) are assigned to desired physical worker nodes. Users can use these Python scripts to retrieve the properties of the underlying hardware and then decide on required labels that should be assigned to each physical worker nodes.")]),e._v(" "),a("h2",{attrs:{id:"sample-scripts-for-labeling-worker-nodes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-scripts-for-labeling-worker-nodes"}},[e._v("#")]),e._v(" Sample scripts for labeling worker nodes")]),e._v(" "),a("p",[e._v("To label the physical worker node in Red Hat OpenShift Container Platform, use the repository located at the HPE OpenShift Solutions GitHub at "),a("a",{attrs:{href:"https://github.com/hewlettpackard/hpe-solutions-openshift",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://github.com/hewlettpackard/hpe-solutions-openshift"),a("OutboundLink")],1),e._v(". This repository contains Python scripts to automate the labeling of physical worker nodes by discovering the physical node properties in a Red Hat OpenShift Container Platform 4 deployment and advertising them through node labels. Node labels can be targeted for deployment using node selectors which can be set at a project level (can be used to restrict which nodes a project gets access to) or pod level.")]),e._v(" "),a("h3",{attrs:{id:"contents-of-the-repository"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#contents-of-the-repository"}},[e._v("#")]),e._v(" Contents of the repository")]),e._v(" "),a("ol",[a("li",[a("p",[a("strong",[e._v("config.json")]),e._v(": This file contains variables holding information about the OpenShift specific environment variables.")]),e._v(" "),a("ul",[a("li",[a("p",[a("strong",[e._v("kubeconfig_path")]),e._v(': Specifies the path of kubeconfig and this path is used by the "oc" command at runtime.')])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("oc_command_path")]),e._v(': Specifies the oc command path and is used to run the "oc" command.')])])])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("hosts.json")]),e._v(": This is the inventory file which will be used by OpenShift installer VM to reference physical worker nodes and user-defined labels.")]),e._v(" "),a("ul",[a("li",[a("p",[a("strong",[e._v("host_fqdn")]),e._v(": Specifies the physical worker node fully qualified domain name or IP.")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("ilo_ip")]),e._v(": iLO IP of the physical worker node.")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("username")]),e._v(": Username used to log in to the iLO of the physical worker node.")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("password")]),e._v(": Password to log in to the iLO of the physical worker node.")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("custom_label_required")]),e._v(': The value is "yes" if the user wishes to use custom labels. Otherwise, it should be set to "no".')])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("custom_labels")]),e._v(": Specify the custom labels key and value.")])])])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("json_parser.py")]),e._v(": This file contains the logic to derive value of any standalone key or nested keys from the json file.")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("physical_node_labelling.py")]),e._v(': This file contains the logic to derive the physical hardware properties and label of the Red Hat OpenShift Container Platform physical worker nodes based on properties and user-defined label names. To extract hardware properties, Python module "proliantutils" is used in this script.')])])]),e._v(" "),a("h3",{attrs:{id:"prerequisites"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#prerequisites"}},[e._v("#")]),e._v(" Prerequisites")]),e._v(" "),a("ol",[a("li",[a("p",[e._v("Red Hat OpenShift Container Platform 4 is up and running.")])]),e._v(" "),a("li",[a("p",[e._v("There must be at least one physical worker node in the Red Hat OpenShift Container Platform 4 deployment.")])])]),e._v(" "),a("h3",{attrs:{id:"executing-the-playbooks"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#executing-the-playbooks"}},[e._v("#")]),e._v(" Executing the playbooks")]),e._v(" "),a("ol",[a("li",[a("p",[e._v("Login to the installer VM.")])]),e._v(" "),a("li",[a("p",[e._v("Activate the Python 3 virtual environment as mentioned in the section "),a("RouterLink",{attrs:{to:"/Preparing the execution environment/Preparing the execution environment.html#installer-machine"}},[e._v("Installer machine")]),e._v(" in this document.")],1)]),e._v(" "),a("li",[a("p",[e._v("Proliantutils is a set of utility libraries for interfacing and managing various components (like iLO) for HPE ProLiant Servers. Execute the following command to install proliantutils.")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" pip "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("proliantutils")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("==")]),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("2.9")]),e._v(".2\n")])])])]),e._v(" "),a("li",[a("p",[e._v("Verify the version of proliantutils using the following command.")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" pip freeze "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("grep")]),e._v(" proliantutils\n")])])]),a("p",[e._v("The output is as follows.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("You are using pip version 9.0.1, however version 20.0.2 is available.\nYou should consider upgrading via the 'pip install --upgrade pip' command.\n proliantutils==2.9.2\n")])])])]),e._v(" "),a("li",[a("p",[e._v("Execute the following command to install sushy module.")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" pip "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("sushy")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("==")]),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("3.0")]),e._v(".0\n")])])])]),e._v(" "),a("li",[a("p",[e._v("Verify the version of sushy.")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" pip freeze "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("grep")]),e._v(" sushy\n\nOutput: "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("3.0")]),e._v(".0\n")])])])]),e._v(" "),a("li",[a("p",[e._v("Execute the following command and navigate to the directory physical-worker labeling.")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("cd")]),e._v(" etc/ansible/hpe-solutions-openshift/synergy/scalable/platform/physical-workerlabeling \n```  \n\n")])])])]),e._v(" "),a("li",[a("p",[e._v("Update the "),a("em",[e._v("config.json")]),e._v(" and "),a("em",[e._v("hosts.json")]),e._v(" files with appropriate values.")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("vi")]),e._v(" config.json\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("vi")]),e._v(" hosts.json\n")])])])]),e._v(" "),a("li",[a("p",[e._v("After the files mentioned in step 8 are updated, execute the script using the following command. The installation user will see the output similar to the following.")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" python physical"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("_node"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("_labelling.py\n")])])]),a("p",[e._v("The output is as follows.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("1: Get the physical worker node details.\n\n2: Get current health status of the physical worker node\n\n3: Get security parameters of the physical worker node\n\n4: Label the physical worker with health status\n\n5: Label the physical worker with security status\n\n6: Custom labels\n\n7: Display current labels on the node\n\n8: Quit\n\nEnter the choice number:\n")])])])]),e._v(" "),a("li",[a("p",[e._v("Select option 1 to retrieve the physical worker node details. The output is similar to the following.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Enter the choice number: 1\n\n{'server1': {'host\\_fqdn': 'ocs1.jocp.twentynet.local', 'ilo\\_ip': '10.0.x.x',\n\n'username': 'admin', 'password': 'admin123', 'custom\\_label\\_required': 'yes',\n\n'custom\\_labels': {'label1': {'label\\_name': 'trial', 'label\\_val': 'trail123'},'label2':\n\n{'label\\_name': 'trial2', 'label\\_val': 'trial456'}}}}\n\n")])])])]),e._v(" "),a("li",[a("p",[e._v("Select option 2 to retrieve the current health status of the physical worker node. The output is similar to the following.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Enter the choice number: 2\n\n{'ocs1.jocp.twentynet.local': 'OK'}\n\n")])])])]),e._v(" "),a("li",[a("p",[e._v("Select option 3 to retrieve the security parameters of the physical worker node. The output is similar to the following.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Enter the choice number: 3\n\n{'ocs1.jocp.twentynet.local': 'Degraded'}\n\n")])])])]),e._v(" "),a("li",[a("p",[e._v("Select option 4 to label the physical worker with its current hardware health status. The output is similar to the following.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Enter the choice number: 4\n\nNAME STATUS ROLES AGE VERSION LABELS\n\nocs1.jocp.twentynet.local Ready worker 6d4h v1.16.2\n\nbeta.kubernetes.io/arch=amd64,beta.kubernetes.io/os=linux,health=OK,kubernet\n\nes.io/arch=amd64,kubernetes.io/hostname=ocs1.jocp.twentynet.local,kubernetes\n\n.io/os=linux,node-\n\nrole.kubernetes.io/worker=,node.openshift.io/os\\_id=rhcos,qa\\_shree1=1,qa\\_shree\n\n2=2,security=Degraded,shreeman=new\\_label2,trial2=trial456,trial=trail123\n\nVerified - Label health=OK is added to the node ocs1.jocp.twentynet.local\n\nb''\n")])])])]),e._v(" "),a("li",[a("p",[e._v("Select option 5 to label the physical worker with security status. The output is similar to the following.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" Enter the choice number: 5\n\n NAME STATUS ROLES AGE VERSION LABELS\n\n ocs1.jocp.twentynet.local Ready worker 6d4h v1.16.2\n\n beta.kubernetes.io/arch=amd64,beta.kubernetes.io/os=linux,health=OK,kubernet\n\n es.io/arch=amd64,kubernetes.io/hostname=ocs1.jocp.twentynet.local,kubernetes\n\n .io/os=linux,node-\n\n role.kubernetes.io/worker=,node.openshift.io/os\\_id=rhcos,qa\\_shree1=1,qa\\_shree\n\n 2=2,security=Degraded,shreeman=new\\_label2,trial2=trial456,trial=trail123\n\n Verified - Label security=Degraded is added to the node\n\n ocs1.jocp.twentynet.local\n\n b''\n\n")])])])]),e._v(" "),a("li",[a("p",[e._v("Select option 6 to define custom labels. The output is similar to the following.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Enter the choice number: 6\n\nNAME STATUS ROLES AGE VERSION LABELS\n\nocs1.jocp.twentynet.local Ready worker 6d4h v1.16.2\n\nbeta.kubernetes.io/arch=amd64,beta.k\n\nubernetes.io/os=linux,health=OK,kubernetes.io/arch=amd64,kubernetes.io/hostn\n\name=ocs1.jocp.twentynet\n\n.local,kubernetes.io/os=linux,node-\n\nrole.kubernetes.io/worker=,node.openshift.io/os\\_id=rhcos,qa\\_shre\n\ne1=1,qa\\_shree2=2,security=Degraded,shreeman=new\\_label2,trial2=trial456,trial\n\n=trail123\n\nVerified - Label trial=trail123 is added the node ocs1.jocp.twentynet.local\n\nNAME STATUS ROLES AGE VERSION LABELS\n\nocs1.jocp.twentynet.local Ready worker 6d4h v1.16.2\n\nbeta.kubernetes.io/arch=amd64,beta.k\n\nubernetes.io/os=linux,health=OK,kubernetes.io/arch=amd64,kubernetes.io/hostn\n\name=ocs1.jocp.twentynet\n\n.local,kubernetes.io/os=linux,node-\n\nrole.kubernetes.io/worker=,node.openshift.io/os\\_id=rhcos,qa\\_shre\n\ne1=1,qa\\_shree2=2,security=Degraded,shreeman=new\\_label2,trial2=trial456,trial\n\n=trail123\n\nVerified - Label trial2=trial456 is added the node ocs1.jocp.twentynet.local\n\nb''\n")])])])]),e._v(" "),a("li",[a("p",[e._v("Select option 7 to display current labels on the node. The output is similar to the following.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Enter the choice number: 7\n\nNAME STATUS ROLES AGE VERSION LABELS\n\nocs1.jocp.twentynet.local Ready worker 6d4h v1.16.2\n\nbeta.kubernetes.io/arch=amd64,beta.kubernetes.io/os=linux,health=OK,kubernet\n\nes.io/arch=amd64,kubernetes.io/hostname=ocs1.jocp.twentynet.local,kubernetes\n\n.io/os=linux,node-\n\nrole.kubernetes.io/worker=,node.openshift.io/os\\_id=rhcos,qa\\_shree1=1,qa\\_shree\n\n2=2,security=Degraded,shreeman=new\\_label2,trial2=trial456,trial=trail123\n")])])])]),e._v(" "),a("li",[a("p",[e._v("Select option 8 to quit the script. The output is shown as follows.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Enter the choice number: 8\n\nExiting!!\n")])])])])]),e._v(" "),a("h3",{attrs:{id:"verify-scheduling-of-pods-using-nodeselector"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#verify-scheduling-of-pods-using-nodeselector"}},[e._v("#")]),e._v(" Verify scheduling of pods using NodeSelector")]),e._v(" "),a("ol",[a("li",[a("p",[e._v("Execute the following command to get all the nodes in the Red Hat OpenShift Container Platform installation.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("```bash\n> oc get nodes\n```\n")])])]),a("p",[e._v("The output is similar to the following.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("```\nNAME STATUS ROLES AGE VERSION\n\nmaster1.jocp.twentynet.local Ready master 37d v1.16.2\n\nmaster2.jocp.twentynet.local Ready master 37d v1.16.2\n\nmaster3.jocp.twentynet.local Ready master 37d v1.16.2\n\nworker1.jocp.twentynet.local Ready worker 34d v1.16.2\n\nworker2.jocp.twentynet.local Ready worker 31d v1.16.2\n\nworker3.jocp.twentynet.local Ready worker 31d v1.16.2\n\nworker4.jocp.twentynet.local Ready worker 16d v1.16.2\n\nworker5.jocp.twentynet.local Ready worker 16d v1.16.2\n\nocs1.jocp.twentynet.local Ready worker 16d v1.16.2\n```\n")])])]),a("p",[a("strong",[e._v("NOTE")])]),e._v(" "),a("p",[e._v("Node “ocs1.jocp.twentynet.local” is the physical worker node and other worker nodes are virtual machines.")])]),e._v(" "),a("li",[a("p",[e._v("Execute the following command to create a new project.")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" oc new-project test4\n")])])])]),e._v(" "),a("li",[a("p",[e._v("Execute the following command to create a new application in the newly created project “test4”.")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" oc new-app django-psql-example\n")])])])]),e._v(" "),a("li",[a("p",[e._v("Execute the following command to get the pods for the newly created application.")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" oc get pods\n")])])]),a("p",[e._v("The output is similar to the following.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("NAME READY STATUS RESTARTS AGE\n\npostgresql-1-bgzjm 0/1 Running 0 15s\n\npostgresql-1-deploy 1/1 Running 0 23s\n")])])])]),e._v(" "),a("li",[a("p",[e._v("Execute the following command to describe the application pod.")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" oc describe pod postgresql-1-bgzjm\n")])])]),a("p",[e._v("The output is similar to the following.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Name: postgresql-1-bgzjm\n\nNamespace: test\n\nPriority: 0\n\nNode: worker1.jocp.twentynet.local/20.0.x.x\n")])])])]),e._v(" "),a("li",[a("p",[e._v("Execute the following command to check the deployment configuration.")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" oc get "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("dc")]),e._v("\n")])])]),a("p",[e._v("The output is similar to the following.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("NAME REVISION DESIRED CURRENT TRIGGERED BY\n\ndjango-psql-example 0 1 0 config,image(django-psql-example:latest)\n\npostgresql 1 1 1 config,image(postgresql:10)\n")])])])]),e._v(" "),a("li",[a("p",[e._v("Patch the deployment configuration with the “NodeSelector” as “health=OK”. This labeling will notify the scheduler about the application associated with this deployment configuration and is expected to run on a node with a label of “health=OK”. The command is as shown:")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" oc patch "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("dc")]),e._v(" postgresql –p "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('\'{"spec": {"template":{"spec":{"nodeSelector":{"health": "OK"}}}}}\'')]),e._v("\ndeploymentconfig.apps.openshift.io/postgresql patched\n")])])])]),e._v(" "),a("li",[a("p",[e._v("Execute the following command to validate new pods that are created for the same application after the deployment configuration is updated with node selector information.")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" oc get pods\n")])])]),a("p",[e._v("The output is similar to the following.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("NAME READY STATUS RESTARTS AGE\n\npostgresql-1-deploy 0/1 Completed 0 5m7s\n\npostgresql-2-deploy 0/1 Completed 0 56s\n\npostgresql-2-vvqcf 1/1 Running 0 45s\n")])])])]),e._v(" "),a("li",[a("p",[e._v("Execute the following command to describe the newly created application pod to validate to see if it is deployed on the node with the desired label.")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" oc describe pod postgresql-2-vvqcf\n")])])]),a("p",[e._v("The output is similar to the following. It shows that the application is deployed on the node "),a("em",[e._v("“ocs1.jocp.twentynet.local”")]),e._v(" which was labeled as “health=OK” in step 11 of the section "),a("RouterLink",{attrs:{to:"/Physical worker node labeling in OpenShift/Physical worker node labeling in OpenShift.html#executing-the-playbooks"}},[e._v("Executing the playbooks")]),e._v(" in this document.")],1),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Name: postgresql-2-vvqcf\n\nNamespace: test\n\nPriority: 0\n\nNode: ocs1.jocp.twentynet.local /20.0.x.x\n\nNode-Selectors: health=OK\n")])])])])]),e._v(" "),a("p",[a("strong",[e._v("NOTE")])]),e._v(" "),a("p",[e._v("These scripts have been tested on Red Hat OpenShift Container Platform 4.3 with the following configuration parameters:")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("Worker nodes are running RHCOS as the operating system")])]),e._v(" "),a("li",[a("p",[e._v("Installer VM OS Version: RHEL 7.6")])]),e._v(" "),a("li",[a("p",[e._v("Python: 3.6.9")])]),e._v(" "),a("li",[a("p",[e._v("proliantutils: 2.9.2")])]),e._v(" "),a("li",[a("p",[e._v("sushy: 3.0.0")])])])])}),[],!1,null,null,null);t.default=n.exports}}]);