###
## Copyright (2019) Hewlett Packard Enterprise Development LP
##
## Licensed under the Apache License, Version 2.0 (the "License");
## You may not use this file except in compliance with the License.
## You may obtain a copy of the License at
##
##Â http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
####

- name: Copy backup and recovery script on each node of the OCP cluster
  copy:
    src: backup_master_node.sh
    dest: /tmp/backup_master_node.sh
    backup: yes
    force: yes

- name: Wait for Seconds before proceeding
  wait_for: timeout=10

- file:
    path: /tmp/backup_master_node.sh
    owner: root
    group: root
    mode: 0777

- name: Wait for Seconds before proceeding
  wait_for: timeout=5


- name: This command will change the working directory to /tmp and will only run command.
  command: ./backup_master_node.sh
  args:
    chdir: /tmp/
  ignore_errors: True
  

- name: Wait for Seconds before proceeding
  wait_for: timeout=5

- name: Create a bz2 archive of multiple files, rooted at /tmp
  archive:
    path: /backup/{{ inventory_hostname }}
    dest: /backup/{{ inventory_hostname }}.tar.bz2
    format: bz2

- name: Fetch the file from the node under test to ansible engine
  fetch:
    src: /backup/{{ inventory_hostname }}.tar.bz2
    dest: /mnt/
    flat: yes
    fail_on_missing: yes

- name: Wait for Seconds before proceeding
  wait_for: timeout=40

- name: Fetch Checksum from ansible engine as destination of file
  stat:
    path: "/mnt/{{ inventory_hostname }}.tar.bz2"
    checksum_algorithm: sha256
  delegate_to: localhost
  register: local_files

- name: Fetch Checksum from remote host as source of file
  stat:
    path: "/backup/{{ inventory_hostname }}.tar.bz2"
    checksum_algorithm: sha256
  register: remote_files

- block:
    - name: End play if source and destination checksum does not match
      debug:
        msg: "Ending the play. Reason: source and destination checksum does not match."

    - meta: end_play
  when: remote_files.stat.checksum != local_files.stat.checksum
