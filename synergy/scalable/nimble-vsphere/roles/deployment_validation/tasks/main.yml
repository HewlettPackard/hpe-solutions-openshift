###
## Copyright (2019) Hewlett Packard Enterprise Development LP
##
## Licensed under the Apache License, Version 2.0 (the "License");
## You may not use this file except in compliance with the License.
## You may obtain a copy of the License at
##
## http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
####
---
- name: Checking Nodes Information
  shell: oc get nodes | grep -e "NotReady"|awk '{print $1}'
  run_once: true
  ignore_errors: yes
  register: nodes_info


- debug: 
   msg: The below Nodes are in NotReady state  "{{nodes_info.stdout_lines}}"
  when: nodes_info.stdout != ""

- name: Checking Pods Information
  shell: oc get pods
  run_once: true
  ignore_errors: yes
  register: pods_info 

- debug:
   msg: "{{pods_info.stdout_lines}}"

- name: Connect to the Default Namespace/Project
  command: oc project default
  run_once: true

- name: Check if the Storage Class "{{ openshift_logging_es_pvc_storage_class_name  }}" already exists
  shell: oc get sc | grep -e "{{ openshift_logging_es_pvc_storage_class_name  }}" | awk '{print $1}'
  register: scresult
  run_once: true
  ignore_errors: yes

- name: Create a Storage Class
  import_tasks: create_sc.yml
  run_once: true
  when: scresult.stdout != "{{ openshift_logging_es_pvc_storage_class_name  }}"

- debug:
    msg: 'Storage Class "{{ openshift_logging_es_pvc_storage_class_name  }}"  already exists'
  when: scresult.stdout == "{{ openshift_logging_es_pvc_storage_class_name  }}"

- name: Check if the PVC already exists
  shell: oc get pvc | grep -E "{{ pvc_name  }}" | awk '{print $1}'
  register: pvcresult
  run_once: true
  ignore_errors: yes

- name: Create a Persistent Volume Claim
  import_tasks: create_pvc.yml
  run_once: true
  ignore_errors: yes
  when: pvcresult.stdout != "{{ pvc_name  }}"

- debug:
    msg: PVC by name "{{ pvc_name  }}" already exists
  run_once: true
  when: pvcresult.stdout == "{{ pvc_name  }}"

- name: Check if the Pod is already exists
  shell: oc get pods | grep -E "{{ pod_name }}" | awk '{print $1}'
  register: podresult
  run_once: true

- name: Creting a Pod
  import_tasks: create_pod.yml
  run_once: true
  when: podresult.stdout != "{{ pod_name }}"

- name: Wait for Seconds before proceeding
  wait_for: timeout=10
  when: podresult.stdout == ""

- name: Check if  "{{ pod_name  }}" pod is running
  shell: oc get pods| grep -E "{{pod_name }}"'*.*Running' | awk '{print $1}'
  register: hpepodresult
  run_once: true
  ignore_errors: yes

- name: Check if the Pod is running with the Persistent Storage
  shell: oc describe pod "{{ hpepodresult.stdout  }}" | grep -E "ClaimName"|awk '{print $2}'
  register: pvcclaimresult
  run_once: true
  ignore_errors: yes

- name: Check if the Pod is Bound with the Persistent Volume
  shell: oc get pvc | grep -E "{{ pvc_name  }}" | awk '{ print $2  }'
  register: pvcboundresult
  run_once: true
  ignore_errors: yes

- debug:
    msg: "Validations are done successfully"
  when: 
   - pvcclaimresult.stdout == "{{ pvc_name  }}" and pvcboundresult.stdout == "Bound"
  run_once: true

- debug:
    msg: Failed to create "{{pod_name }}" with Persistent Storage
  when:
   - pvcclaimresult.stdout != "{{ pvc_name  }}" and pvcboundresult.stdout != "Bound"
  run_once: true
