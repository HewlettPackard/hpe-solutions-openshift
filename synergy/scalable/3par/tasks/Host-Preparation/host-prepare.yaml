###
## Copyright (2018) Hewlett Packard Enterprise Development LP
##
## Licensed under the Apache License, Version 2.0 (the "License");
## You may not use this file except in compliance with the License.
## You may obtain a copy of the License at
##
##Â http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
#### 

---
- hosts:
    - masters
    - etcd
    - lb
    - physical-nodes
  gather_facts: false
  tasks:  
   - name: "Stop firewall if running "
     service: name={{item}} state=stopped
     register: unused_disable
     failed_when: "unused_disable|failed and ('find' not in unused_disable.msg and 'found' not in unused_disable.msg)"
     with_items:
         - firewalld

   - name: Make sure we have a 'wheel' group
     group:
        name: wheel
        state: present
   
   - name: Create a Sudo user for OpenShift Installation
     user: 
        name: oshiftuser
        comment: "User used for UpenShift Installtion"
        shell: /bin/bash
        groups: wheel
        append: yes
        generate_ssh_key: yes
   
   - name: Allow Wheel group to have passwordless Sudo rights
     lineinfile:
        path: /etc/sudoers
        state: present
        regexp: '^%wheel'
        line: '%wheel ALL=(ALL) NOPASSWD: ALL'
        regexp: '^# %wheel'
        line: '%wheel        ALL=(ALL)       NOPASSWD: ALL'
        validate: 'visudo -cf %s'
   
   - name: Upload SSH Public key for SSHing without credentials
     authorized_key:
        user: oshiftuser
        state: present
        manage_dir: yes
        key: "{{ lookup('file', '~/.ssh/id_rsa.pub') }}"     

- hosts:
    - masters
    - lb
    - etcd
  gather_facts: false
  tasks:
   - name: Host variables
     include_vars: vars-hosts.yaml
  
   - name: Is the host already registered?
     shell: subscription-manager status | grep -e "Current"|awk '{print $3}'
     register: vmsubscribed
     ignore_errors: yes
   
   - name: Register machines to RHSM  
     redhat_subscription:
          state: present
          username: "{{rhsm_user}}" 
          password: "{{rhsm_pass}}"
          force_register: yes
          pool_ids:
             "{{ pool_ids_vms }}"
     when: 
       - pool_ids_vms is defined
       - vmsubscribed.stdout != 'Current'
     ignore_errors: yes

- hosts:
    - physical-nodes
  gather_facts: false
  tasks:
   - name: Host variables
     include_vars: vars-hosts.yaml

   - name: Is the host already registered?
     shell: subscription-manager status | grep -e "Current"|awk '{print $3}'
     register: physubscribed
     ignore_errors: yes
   
   - name: Register physical machines to RHSM  
     redhat_subscription:
          state: present
          username: "{{rhsm_user}}" 
          password: "{{rhsm_pass}}"
          force_register: yes
          pool_ids: 
             "{{ pool_ids_physical }}"
     when: 
       - pool_ids_physical is defined 
       - physubscribed.stdout != 'Current'
     ignore_errors: yes

- hosts:
    - masters
    - lb
    - etcd
    - physical-nodes
  gather_facts: false
  tasks:
   - name: Disable all repos
     command: 'subscription-manager repos --disable=*'
 
   - name: Enable Reqired repos
     command: 'subscription-manager repos "--enable=rhel-7-server-rpms" "--enable=rhel-7-server-ose-3.7-rpms" "--enable=rhel-7-server-extras-rpms" "--enable=rhel-7-fast-datapath-rpms"'
 
   - name: Install Basic Utils
     command: '/usr/bin/yum -y install wget git net-tools bind-utils iptables-services bridge-utils bash-completion'
  
   - name: Perform an Update
     yum:
        name: '*'
        state: latest

   - name: Install Openshift related packages
     yum:
        name: "{{item}}"
        state: latest
     with_items:
     - gcc
     - python-virtualenv
     - atomic-openshift-utils
     - atomic

- hosts:
    - masters
    - physical-nodes
  gather_facts: false
  tasks:
  - name: LVM Volume Group with name "docker-vg" already exists?
    shell: vgdisplay |grep -E docker-vg |awk '{print $3}'
    register: vgvmname
    ignore_errors: yes

  - name: Fail if LVM Volume Group docker-vg already exists
    fail: 
      msg: "LVM Volume Group with name docker-vg already exists"
    when:
      - vgvmname.stdout == "docker-vg"


- hosts:
    - masters
    - physical-nodes
  gather_facts: false
  tasks:
  - name: Install dockers  
    package:
      name: "docker{{ '-' + docker_version if docker_version is defined else '' }}"
      state: present 
  
  - name: Stop Docker service if running
    service:
      name: docker
      state: stopped

  - name: Remove docker-storage-setup config
    shell: $null > /etc/sysconfig/docker-storage-setup

- hosts:
    - masters
  gather_facts: false
  tasks:
  - name: Edit docker-storage-setup file to add the second disk for Docker local volume for Physical worker nodes
    lineinfile:
       path: /etc/sysconfig/docker-storage-setup
       state: present
       line: "{{ item }}"
    with_items:
      - STORAGE_DRIVER=devicemapper
      - DEVS=/dev/vdb
      - VG=docker-vg

- hosts:
    - physical-nodes
  gather_facts: false
  tasks:
  - name: Edit docker-storage-setup file to add the second disk for Docker local volume for Physical worker nodes
    lineinfile:
       path: /etc/sysconfig/docker-storage-setup
       state: present
       line: "{{ item }}"
    with_items:
      - STORAGE_DRIVER=devicemapper
      - DEVS={{ second_disk_physical }}
      - VG=docker-vg

- hosts:
    - physical-nodes
    - masters
  gather_facts: false
  tasks:
  - name: Start and Enable docker service
    service:
      name: docker
      state: started
      enabled: yes

  - name: Run docker-storage-setup for configure  Docker local volume
    shell: docker-storage-setup
 
- hosts:
    - masters
    - etcd
    - lb
    - physical-nodes
  gather_facts: false
  tasks:
   - name: "Enable firewall"
     service: name={{item}} state=started
     register: unused_disable2
     failed_when: "unused_disable2|failed and ('find' not in unused_disable2.msg and 'found' not in unused_disable2.msg)"
     with_items:
         - firewalld 
     ignore_errors: yes

- hosts:
    - masters
    - etcd
    - lb
  gather_facts: false
  tasks:  
   - name: Disable cloudinit
     command: "touch /etc/cloud/cloud-init.disabled"

