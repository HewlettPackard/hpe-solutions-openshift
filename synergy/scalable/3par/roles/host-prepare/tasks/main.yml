###
## Copyright (2018) Hewlett Packard Enterprise Development LP
##
## Licensed under the Apache License, Version 2.0 (the "License");
## You may not use this file except in compliance with the License.
## You may obtain a copy of the License at
##
##Â http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
####


---
- name: "disable firewall and other unused services"
  service: name={{item}} state=stopped enabled=no
  register: unused_disable
  failed_when: "unused_disable|failed and ('find' not in unused_disable.msg and 'found' not in unused_disable.msg)"
  with_items:
      - firewalld

- name: Make sure we have a 'wheel' group
  group:
     name: wheel
     state: present

- name: Create a Sudo user for OpenShift Installation
  user:
     name: oshiftuser
     comment: "User used for UpenShift Installtion"
     shell: /bin/bash
     groups: wheel
     append: yes
     generate_ssh_key: yes

- name: Allow Wheel group to have passwordless Sudo rights
  lineinfile:
     path: /etc/sudoers
     state: present
     regexp: '^%wheel'
     line: '%wheel ALL=(ALL) NOPASSWD: ALL'
     regexp: '^# %wheel'
     line: '%wheel        ALL=(ALL)       NOPASSWD: ALL'
     validate: 'visudo -cf %s'

- name: Upload SSH Public key for SSHing without credentials
  authorized_key:
     user: oshiftuser
     state: present
     manage_dir: yes
     key: "{{ lookup('file', '~/.ssh/id_rsa.pub') }}"


- name: Is the host already registered?
  shell: subscription-manager status | grep -e "Current"|awk '{print $3}'
  register: vmsubscribed
  ignore_errors: yes

- name: Register virtual machines to RHSM
  redhat_subscription:
     state: present
     username: "{{ vault_rhsub_user }}"
     password: "{{ vault_rhsub_pass }}"
     force_register: yes
     pool_ids:
        "{{ pool_ids_vms }}"
  when:
     - pool_ids_vms is defined
     - vmsubscribed.stdout != 'Current'
     - "'virtual-nodes' in {{ group_names }}"
  ignore_errors: yes

- name: Register Physical worker nodes to RHSM
  redhat_subscription:
     state: present
     username: "{{ vault_rhsub_user }}"
     password: "{{ vault_rhsub_pass }}"
     force_register: yes
     pool_ids:
        "{{ pool_ids_physical }}"
  when:
     - pool_ids_physical is defined
     - vmsubscribed.stdout != 'Current'
     - "'physical-nodes' in {{ group_names }}"
  ignore_errors: yes

- name: Disable all repos
  command: 'subscription-manager repos --disable=*'

- name: Enable Reqired reposi
  command: 'subscription-manager repos "--enable=rhel-7-server-ansible-2.4-rpms" "--enable=rhel-7-server-rpms" "--enable=rhel-7-server-ose-3.10-rpms" "--enable=rhel-7-server-extras-rpms" "--enable=rhel-7-fast-datapath-rpms"'

- name: Install Basic Utils
  yum:
     name: "{{item}}"
     state: latest
  with_items:
  - wget
  - git
  - net-tools
  - bind-utils
  - yum-utils
  - iptables-services
  - bridge-utils
  - bash-completion
  - kexec-tools
  - sos
  - psacct

- name: Perform an Update
  yum:
     name: '*'
     state: latest

- name: Install Openshift related packages
  yum:
     name: "{{item}}"
     state: latest
  with_items:
  - gcc
  - python-virtualenv
  - openshift-ansible
  - atomic-openshift-node
  - atomic  

- name: LVM Volume Group with name "docker-vg" already exists?
  shell: vgdisplay |grep -E docker-vg |awk '{print $3}'
  register: vgvmname
  ignore_errors: yes

- name: End Play if LVM Volume Group already exists
  meta: end_play
  when:
    - vgvmname.stdout == "docker-vg"

- name: Install dockers
  package:
    name: "docker"
    state: latest

- name: Stop Docker service if running
  service:
    name: docker
    state: stopped

- name: Remove docker-storage-setup config
  shell: $null > /etc/sysconfig/docker-storage-setup

- name: replace daemon.json insecure registry
  copy:
    src: daemon.json
    dest: /etc/docker/
    owner: root
    group: root
    mode: 0644

- name: Edit docker-storage-setup file to add the second disk for Docker local volume for Virtual Machines
  lineinfile:
    path: /etc/sysconfig/docker-storage-setup
    state: present
    line: "{{ item }}"
  with_items:
    - DEVS=/dev/vdb
    - VG=docker-vg
    - STORAGE_DRIVER=devicemapper
  when:
    - "'virtual-nodes' in {{ group_names }}"


- name: Edit docker-storage-setup file to add the second disk for Docker local volume for Physical worker nodes
  lineinfile:
     path: /etc/sysconfig/docker-storage-setup
     state: present
     line: "{{ item }}"
  with_items:
    - STORAGE_DRIVER=devicemapper
    - DEVS={{ second_disk_physical }}
    - VG=docker-vg
  when:
    - "'physical-nodes' in {{ group_names }}"


- name: Start and Enable docker service
  service:
    name: docker
    state: started
    enabled: yes

- name: Run docker-storage-setup for configure  Docker local volume
  shell: docker-storage-setup

- name: "Enable firewall"
  service: name={{item}} state=started
  register: unused_disable2
  failed_when: "unused_disable2|failed and ('find' not in unused_disable2.msg and 'found' not in unused_disable2.msg)"
  with_items:
      - firewalld

- name: Disable Cloudinit
  command: "touch /etc/cloud/cloud-init.disabled"
  when:
       - "'virtual-nodes' in {{ group_names }}"
