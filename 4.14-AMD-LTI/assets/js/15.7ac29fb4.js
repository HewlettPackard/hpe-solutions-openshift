(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{210:function(t,s,e){"use strict";e.r(s);var a=e(0),n=Object(a.a)({},(function(){var t=this,s=t._self._c;return s("div",{staticClass:"content"},[t._m(0),t._v(" "),s("p",[t._v("The Lite Touch Installation (LTI) package includes Ansible playbooks with scripts to add the bare metal CoreOS worker nodes to the RHOCP cluster. You can use one of the following two methods to add the CoreOS worker nodes:")]),t._v(" "),t._m(1),t._v(" "),t._m(2),t._m(3),t._v(" "),s("p",[t._v("If network interface bonding is required on the bare metal worker nodes, follow the Step 4 and then proceed for the CSR certificate verfication.")]),t._v(" "),t._m(4),t._v(" "),s("p",[t._v("The following table includes the purpose of each playbook required for the deployment:")]),t._v(" "),t._m(5),t._v(" "),t._m(6),t._v(" "),s("p",[t._v("To run individual playbooks do one of the following:")]),t._v(" "),t._m(7),t._v(" "),s("p",[t._v("For example, add the following comments in the site.yml file to bind dns on the worker nodes:")]),t._v(" "),t._m(8),s("p",[t._v("OR")]),t._v(" "),s("p",[t._v("Run the individual YAML files using the following command:")]),t._v(" "),t._m(9),s("p",[t._v("For example, run the following YAML file to bind dns to the worker nodes:")]),t._v(" "),t._m(10),s("p",[t._v("For more information on executing individual playbooks, see the consecutive sections.")]),t._v(" "),t._m(11),t._v(" "),s("p",[t._v("This section covers the steps to add RHCOS worker nodes to an existing Red Hat OpenShift Container Platform cluster.")]),t._v(" "),t._m(12),t._v(" "),s("p",[t._v("This installer VM was created as a KVM VM on one of the head nodes using the rhel8_installerVM.yml playbook. For more information, see the "),s("router-link",{attrs:{to:"./../Solution-Deployment/OCP-Cluster-deployment.html#creating-rhel-8-installer-machine"}},[t._v("Creating RHEL 8 installer machine")]),t._v(" section.")],1),t._v(" "),t._m(13),t._v(" "),t._m(14),t._m(15),t._v(" "),t._m(16),t._v(" "),t._m(17),t._v(" "),t._m(18),s("p",[t._v("OR")]),t._v(" "),t._m(19),t._v(" "),t._m(20),t._m(21),t._v(" "),t._m(22),t._m(23),t._v(" "),t._m(24),t._v(" "),s("p",[t._v("The administrator needs to approve the CSR requests generated by each kubelet.")]),t._v(" "),s("p",[t._v("You can approve all Pending CSR requests using below command")]),t._v(" "),t._m(25),t._m(26),t._v(" "),t._m(27),t._m(28),t._v(" "),t._m(29)])}),[function(){var t=this._self._c;return t("h1",{attrs:{id:"adding-baremetal-coreos-worker-nodes-to-rhocp-cluster-using-ansible-playbooks"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#adding-baremetal-coreos-worker-nodes-to-rhocp-cluster-using-ansible-playbooks"}},[this._v("#")]),this._v(" "),t("strong",[this._v("Adding BareMetal CoreOS worker nodes to RHOCP cluster using Ansible playbooks")])])},function(){var t=this._self._c;return t("ul",[t("li",[t("strong",[this._v("Run a consolidated playbook:")]),this._v(" This method includes a single playbook, site.yml, that contains a script to perform all the tasks for adding the CoreOS worker nodes to the existing RHOCP cluster. To run LTI using a consolidated playbook:")])])},function(){var t=this._self._c;return t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[this._v("$ ansible-playbook "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[this._v("-i")]),this._v(" hosts site.yml --ask-vault-pass\n")])])])},function(){var t=this._self._c;return t("div",{staticClass:"tip custom-block"},[t("p",{staticClass:"custom-block-title"},[this._v("NOTE")]),this._v(" "),t("p",[this._v("The default password for the Ansible vault file is "),t("strong",[this._v("changeme")])])])},function(){var t=this._self._c;return t("ul",[t("li",[t("strong",[this._v("Run individual playbooks:")]),this._v(" This method includes multiple playbooks with scripts that enable you to deploy specific tasks for adding the CoreOS worker nodes to the existing RHOCP cluster. The playbooks in this method must be executed in a specific sequence to add the worker nodes.")])])},function(){var t=this._self._c;return t("p",[t("strong",[this._v("TABLE 9.")]),this._v(" Playbook Description")])},function(){var t=this,s=t._self._c;return s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"left"}},[t._v("Playbook")]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("Description")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("binddns.yml")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("This playbook contains the script to deploy bind dns on three worker nodes and it will work as both Active & Passive.")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("haproxy.yml")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("This playbook contains the script to deploy haproxy on the worker nodes and it will act as Active.")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("deploy_ipxe_ocp.yml")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("This playbook contains the script to deploy the ipxe code on the worker machine.")])])])])},function(){var t=this._self._c;return t("ol",[t("li",[this._v("Edit site.yml file and add a comment for all the playbooks except the ones that you want to execute.")])])},function(){var t=this._self._c;return t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[this._v("import_playbook: playbooks/binddns.yml\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[this._v("# import_playbook: playbooks/haproxy.yml")]),this._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[this._v("# import_playbook: playbooks/deploy_ipxe_ocp.yml")]),this._v("\n")])])])},function(){var t=this._self._c;return t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[this._v("$ ansible-playbook "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[this._v("-i")]),this._v(" hosts playbooks/"),t("span",{pre:!0,attrs:{class:"token operator"}},[this._v("<")]),this._v("yaml_filename"),t("span",{pre:!0,attrs:{class:"token operator"}},[this._v(">")]),this._v(".yml --ask-vault-pass\n")])])])},function(){var t=this._self._c;return t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[this._v("$ ansible-playbook "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[this._v("-i")]),this._v(" hosts playbooks/binddns.yml --ask-vault-pass\n")])])])},function(){var t=this._self._c;return t("h3",{attrs:{id:"adding-coreos-worker-nodes"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#adding-coreos-worker-nodes"}},[this._v("#")]),this._v(" "),t("strong",[this._v("Adding CoreOS worker nodes")])])},function(){var t=this._self._c;return t("ol",[t("li",[this._v("Login to the Installer VM.")])])},function(){var t=this._self._c;return t("ol",{attrs:{start:"2"}},[t("li",[this._v("Navigate to the $BASE_DIR("),t("strong",[this._v("/opt/hpe-solutions-openshift/DL-LTI-Openshift/")]),this._v(") directory, then copy "),t("strong",[this._v("input file and hosts")]),this._v(" file to $BASE_DIR/coreos_BareMetalworker_nodes/ and later update ocp worker details in input file.")])])},function(){var t=this._self._c;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("ansible-vault edit input.yaml\n------------------------------------------------------------------------------------------------------------\nocp_workers:\n - name: worker1\n   ip: 172.28.xx.xxx\n   fqdn: xxx.ocp.isv.local                   #ex. mworker1.ocp.isv.local\n   mac_address: XX:XX:XX:XX:XX:XX\t\t\t #For BareMetal core os worker update mac address of server NIC\n - name: worker2\n   ip: 172.28.xx.xxx\n   fqdn: xxx.ocp.isv.local                 #ex. mworker2.ocp.isv.local\n   mac_address: XX:XX:XX:XX:XX:XX \t\t   #For BareMetal core os worker update mac address of server NIC\n - name: worker3\n   ip: 172.28.xx.xxx\n   fqdn: xxx.ocp.isv.local                   #ex. mworker3.ocp.isv.local\n   mac_address: XX:XX:XX:XX:XX:XX \t\t     #For BareMetal core os worker update mac address of server NIC\n------------------------------------------------------------------------------------------------------------\n")])])])},function(){var t=this._self._c;return t("div",{staticClass:"tip custom-block"},[t("p",{staticClass:"custom-block-title"},[this._v("NOTE")]),this._v(" "),t("p",[this._v("import the hosts file from the $BASE_DIR")]),this._v(" "),t("p",[this._v("ansible vault password is "),t("strong",[this._v("changeme")])])])},function(){var t=this._self._c;return t("ol",{attrs:{start:"3"}},[t("li",[this._v("Navigate to the /opt/hpe-solutions-openshift/DL-LTI-Openshift/coreos_BareMetalworker_nodes/ directory add the worker nodes to the cluster using one of the following methods:")])])},function(){var t=this._self._c;return t("ul",[t("li",[this._v("Run the following sequence of playbooks:")])])},function(){var t=this._self._c;return t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[this._v("$ ansible-playbook "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[this._v("-i")]),this._v(" hosts playbooks/binddns.yml --ask-vault-pass\n$ ansible-playbook "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[this._v("-i")]),this._v(" hosts playbooks/haproxy.yml --ask-vault-pass\n$ ansible-playbook "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[this._v("-i")]),this._v(" hosts playbooks/deploy_ipxe_ocp.yml --ask-vault-pass\n")])])])},function(){var t=this._self._c;return t("ul",[t("li",[this._v("If you want to deploy the entire solution to add the RH CoreOS worker nodes to the cluster, execute the following playbook:")])])},function(){var t=this._self._c;return t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[this._v("$ ansible-playbook "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[this._v("-i")]),this._v(" hosts site.yml --ask-vault-pass\n")])])])},function(){var t=this._self._c;return t("ol",{attrs:{start:"4"}},[t("li",[this._v("Execute the following command for creating bonding on the network interfaces for baremetal CoreOS worker nodes")])])},function(){var t=this,s=t._self._c;return s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ssh")]),t._v(" core@"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("CoreOS workerIP"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ip")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-o")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("link")]),t._v(" show "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("grep")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'state UP'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("awk")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-F")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("': '")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'{print $2}'")]),t._v("                        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("###to retrive only the names of the network interfaces that are currently UP")]),t._v("\n\nsample output from above command:\n  ens1f0np0\n  ens1f1np1\n\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" nmcli connection "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("type")]),t._v(" bond con-name "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bond0"')]),t._v(" ifname bond0\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" nmcli connection modify bond0 bond.options "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"mode=active-backup,downdelay=0,miimon=100,updelay=0"')]),t._v("\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" nmcli connection "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("type")]),t._v(" ethernet slave-type bond con-name bond0-if1 ifname ens1f0np0 master bond0                "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("###ens1f0np0 interface names from the sample output")]),t._v("\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" nmcli connection "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("type")]),t._v(" ethernet slave-type bond con-name bond0-if2 ifname ens1f1np1 master bond0             "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("###ens1f1np1 interface names from the sample output")]),t._v("\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" nmcli connection up bond0\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" nmcli connection modify "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bond0"')]),t._v(" ipv4.addresses "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'<<CoreOS IP  with netmask>>'")]),t._v(" ipv4.gateway "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'<<gateway IP>>'")]),t._v(" ipv4.dns  "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'<<dns server IP(all the head node IP)>>'")]),t._v(" ipv4.dns-search "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'<<domain name>>'")]),t._v(" ipv4.method manual\n\nexample:\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" nmcli connection modify "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bond0"')]),t._v(" ipv4.addresses "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'172.28.*.*/24'")]),t._v(" ipv4.gateway "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'172.28.*.*'")]),t._v(" ipv4.dns  "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'172.28.*.*,172.28.*.*,172.28.*.*'")]),t._v(" ipv4.dns-search "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'isv.local'")]),t._v(" ipv4.method manual\n\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("reboot")]),t._v("\n")])])])},function(){var t=this._self._c;return t("ol",{attrs:{start:"5"}},[t("li",[this._v("After successful execution of all playbooks, check the node status as below.")])])},function(){var t=this._self._c;return t("p",[t("strong",[this._v("Approving server certificates (CSR) for newly added nodes")])])},function(){var t=this,s=t._self._c;return s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ oc get csr "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-o")]),t._v(" json "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" jq "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-r")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'.items[] | select(.status == {} ) | .metadata.name'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("xargs")]),t._v(" oc adm certificate approve\n")])])])},function(){var t=this._self._c;return t("ol",{attrs:{start:"6"}},[t("li",[this._v("Later, Verify Node status using below command:")])])},function(){var t=this._self._c;return t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[this._v("$ oc get nodes\n")])])])},function(){var t=this._self._c;return t("ol",{attrs:{start:"7"}},[t("li",[this._v("Execute the following command to set the parameter mastersSchedulable parameter as false, so that master nodes will not be used to schedule pods.")])])},function(){var t=this._self._c;return t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[this._v("$ oc edit scheduler\n")])])])}],!1,null,null,null);s.default=n.exports}}]);