###
##Copyright (2019) Hewlett Packard Enterprise Development LP
##
## Licensed under the Apache License, Version 2.0 (the "License");
## You may not use this file except in compliance with the License.
## You may obtain a copy of the License at
##
##Â http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
#### 

---
- name: Check if the Project already exists
  shell: oc login --username "{{ ocpuser }}" --password "{{ ocppassword }}"
  register: ocplogincheck
  run_once: true

- name: End play if project exists
  debug:
        msg: "Ending the play. Reason: Unable to login to OpenShift, check the credentials and re-run the play."
- meta: end_play
  when: ocplogincheck.stderr != "" and ocplogincheck.rc != 0

- name: Check if the Project already exists
  shell: oc get projects | awk '$1 == "{{ projectname }}"'
  register: projnamecheck
  run_once: true

- name: Wait for Seconds before proceeding
  wait_for: timeout=10

- name: End play if project exists
  debug:
        msg: "Ending the play. Reason: User defined project name already exists. Re-visit vars/main.yaml file under roles, change project name and re-run the play."
- meta: end_play
  when: projnamecheck.stdout != "" and projnamecheck.rc == 0
  
- name: Create a new OpenShift project for the Sysdig agent deployment and assign the node selector
  shell: oc adm new-project "{{ projectname }}" --node-selector="{{ appnamekey }}"=sysdig-agent
  run_once: true
  register: newprojcreatecheck
  when: 'projnamecheck.stdout == ""'

- name: Wait for Seconds before proceeding
  wait_for: timeout=10  

- debug:
      msg: '"{{ newprojcreatecheck.stderr }}"'
  run_once: true
  when: 'newprojcreatecheck.stdout != "Created project"'

- debug:
      msg: '"{{ newprojcreatecheck.stdout }}"'
  run_once: true
  when: 'newprojcreatecheck.stdout == "Created project" and projnamecheck.stdout== ""'

- name: Label the node with the node selector
  shell: oc label node --all 'app="{{ appnameval }}"' --overwrite=true
  run_once: true
  when: 'newprojcreatecheck.stdout == "Created project" and projnamecheck.stdout== ""'

- name: Wait for Seconds before proceeding
  wait_for: timeout=10  

- name: Change to the new OpenShift Project for the Sysdig agent deployment 
  command: 'oc project "{{ projectname }}"'
  run_once: true
  register: changetoprojresult

- name: Wait for Seconds before proceeding
  wait_for: timeout=10

- name: Create a service account for the project 
  command: 'oc create serviceaccount sysdig-agent'
  run_once: true
  register: serviceaccresult
  when: 'changetoprojresult.rc == 0'

- name: Wait for Seconds before proceeding
  wait_for: timeout=10  

- debug:
      msg: '"{{ serviceaccresult.stderr }}"'
  run_once: true
  when: 'serviceaccresult.stdout != "created"'

- debug:
      msg: '"{{ serviceaccresult.stdout }}"'
  run_once: true
  when: 'serviceaccresult.stderr == ""'

- name: Add the service account to privileged Security Context Constraints
  shell: oc adm policy add-scc-to-user privileged -n "{{ projectname }}" -z sysdig-agent
  register: securitycontextresult
  run_once: true
  changed_when: 'serviceaccresult.stdout == "created" and serviceaccresult.stderr != "Error from server (AlreadyExists)"'

- name: Wait for Seconds before proceeding
  wait_for: timeout=10  

- name: Add the service account to the cluster-reader Cluster Role
  shell: oc adm policy add-cluster-role-to-user cluster-reader -n "{{ projectname }}" -z sysdig-agent
  register: clusterroleresult
  run_once: true
  changed_when: 'securitycontextresult.stdout == "scc" and securitycontextresult.stdout == "privileged" and securitycontextresult.stdout == "added to"'

- name: Wait for Seconds before proceeding
  wait_for: timeout=10  

- name: Create a secret key
  shell: oc create secret generic sysdig-agent --from-literal="{{ accesskeyname }}"="{{ accesskeyval }}" -n "{{ projectname }}"
  run_once: true
  register: secretkeyresult
  when: 'clusterroleresult.rc == 0'

- name: Wait for Seconds before proceeding
  wait_for: timeout=10  

- name: Copy sysdig configmap file to temporary directory on installer machine
  copy:
    src: sysdig-agent-configmap.yaml
    dest: /tmp/sysdig-agent-configmap.yaml
    mode: 0755
    backup: yes
    force: yes

- name: Wait for Seconds before proceeding
  wait_for: timeout=10

- name: Copy sysdig daemon file to temporary directory on installer machine
  copy:
    src: sysdig-agent-daemonset-redhat-openshift.yaml
    dest: /tmp/sysdig-agent-daemonset-redhat-openshift.yaml
    mode: 0755
    backup: yes
    force: yes

- name: Wait for Seconds before proceeding
  wait_for: timeout=10

- name: Apply the configmap.yaml file using the command
  shell: oc apply -f "/tmp/sysdig-agent-configmap.yaml" -n "{{ projectname }}"
  run_once: true
  register: configmapresult
  when: 'secretkeyresult.rc == 0'

- name: Wait for Seconds before proceeding
  wait_for: timeout=10  

- name: Apply the daemonset-v2.yaml file using the command
  shell: oc apply -f "/tmp/sysdig-agent-daemonset-redhat-openshift.yaml" -n "{{ projectname }}"
  run_once: true
  when: 'configmapresult.rc == 0'

- name: Wait for Seconds before proceeding
  wait_for: timeout=10
